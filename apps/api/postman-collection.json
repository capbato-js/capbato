{
  "info": {
    "_postman_id": "cms-combined-api-collection",
    "name": "Clinic Management System - Complete API Collection",
    "description": "Complete comprehensive API collection for the Clinic Management System with Clean Architecture. This collection combines all individual API collections into a unified testing suite.\n\n## API Coverage\n\n### üîê Authentication API (/api/auth)\n- User registration with role-based access (admin, doctor, receptionist)\n- User login with email/username support\n- JWT token management and validation\n- Password strength validation\n- Doctor-specific profile fields during registration\n\n### üë• User Management (/api/users)\n- User CRUD operations\n- Password change functionality\n- Role-based operations and filtering\n- User profile management\n\n### üë®‚Äç‚öïÔ∏è Doctor Management (/api/doctors)\n- Doctor profile CRUD operations\n- User-Doctor relationship management\n- Medical specialization tracking\n- License and experience management\n- Philippine and US phone number validation\n\n### üè• Patient Management (/api/patients)\n- Patient CRUD operations\n- Patient statistics and reporting\n- Structured Philippine address management\n- Guardian information handling\n- Medical history tracking\n\n### üìÖ Schedule Management (/api/schedules)\n- Doctor schedule CRUD operations\n- Date and time validation\n- Schedule statistics and reporting\n- Today's doctor lookup\n- Future schedule filtering\n\n### üìã Appointment Management (/api/appointments)\n- Appointment CRUD operations\n- Business rule validation (4 per slot, no duplicates)\n- Status management (scheduled, confirmed, cancelled)\n- Patient-Doctor association\n- Time slot management\n\n### üß™ Laboratory Management (/api/laboratory)\n- Laboratory request management\n- Blood chemistry results tracking\n- Critical value alerting\n- Test selection and validation\n- Patient-lab request association\n\n### üìç Address API (/api/address)\n- Philippine address hierarchy (provinces, cities, barangays)\n- Address validation and lookup\n- Geographic data management\n\n### ‚úÖ Todo Management (/api/todos)\n- Complete todo CRUD operations\n- Priority and completion management\n- Todo filtering and statistics\n\n## Testing Strategy\n\nThis collection follows comprehensive testing best practices:\n- **Happy Path Testing**: Core functionality validation\n- **Error Handling**: Validation errors, authentication failures, not found scenarios\n- **Schema Validation**: Response structure verification\n- **Dynamic Data**: Variable management for realistic test flows\n- **Performance Testing**: Response time validations\n- **Security Testing**: Authentication and authorization flows\n- **Business Logic Testing**: Complex validation rules and constraints\n\n## Environment Variables\n\nUse the following environment variables:\n- `cms_local`: http://localhost:4000 (for local development)\n- `cms_prod`: https://capstone-api.up.railway.app (for production)\n- `baseUrl`: Base URL for backward compatibility\n- `authToken`: JWT token for authenticated requests\n- Various test data variables for dynamic testing\n\n## Collection Organization\n\nThe collection is organized into logical folders matching the API structure:\n1. üè• Server Health & Info\n2. üîê Authentication API\n3. üë• User Management API\n4. üë®‚Äç‚öïÔ∏è Doctor Management API\n5. üè• Patient Management API (from copy collection)\n6. üìÖ Schedule Management API\n7. üìã Appointment Management API\n8. üß™ Laboratory Management API\n9. üìç Address API\n10. ‚úÖ Todo Management API (from copy collection)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 2,
      "minor": 3,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Base URL for the Clinic Management System API server"
    },
    {
      "key": "base_url",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Alias for baseUrl to support different collection formats"
    },
    {
      "key": "cms_local",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "CMS Local environment base URL"
    },
    {
      "key": "cms_prod",
      "value": "https://capstone-api.up.railway.app",
      "type": "string",
      "description": "CMS Production environment base URL"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login operations"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string",
      "description": "Dynamic user ID for testing"
    },
    {
      "key": "testPatientId",
      "value": "",
      "type": "string",
      "description": "Dynamic patient ID for testing"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID for testing"
    },
    {
      "key": "testDoctorId",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor ID for testing"
    },
    {
      "key": "doctor_profile_id",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor profile ID for testing"
    },
    {
      "key": "appointment_id",
      "value": "",
      "type": "string",
      "description": "Dynamic appointment ID for testing"
    },
    {
      "key": "sample_patient_id",
      "value": "1",
      "type": "string",
      "description": "Sample patient ID for appointment testing"
    },
    {
      "key": "sample_doctor_id",
      "value": "1",
      "type": "string",
      "description": "Sample doctor ID for appointment testing"
    },
    {
      "key": "future_date",
      "value": "2025-08-10",
      "type": "string",
      "description": "Future date for appointment testing"
    },
    {
      "key": "updated_date",
      "value": "2025-08-11",
      "type": "string",
      "description": "Updated date for appointment testing"
    },
    {
      "key": "updated_doctor_id",
      "value": "2",
      "type": "string",
      "description": "Updated doctor ID for appointment testing"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Dynamic test email for registration tests"
    },
    {
      "key": "loginTestEmail",
      "value": "test.admin@clinic.com",
      "type": "string",
      "description": "Fixed email for login testing"
    },
    {
      "key": "loginTestPassword",
      "value": "AdminPass123",
      "type": "string",
      "description": "Fixed password for login testing"
    },
    {
      "key": "doctorTestEmail",
      "value": "doctor.test@clinic.com",
      "type": "string",
      "description": "Fixed email for doctor role testing"
    },
    {
      "key": "doctorTestPassword",
      "value": "DoctorPass123",
      "type": "string",
      "description": "Fixed password for doctor role testing"
    },
    {
      "key": "receptionistTestEmail",
      "value": "receptionist.test@clinic.com",
      "type": "string",
      "description": "Fixed email for receptionist role testing"
    },
    {
      "key": "receptionistTestPassword",
      "value": "ReceptionistPass123",
      "type": "string",
      "description": "Fixed password for receptionist role testing"
    },
    {
      "key": "metro_manila_code",
      "value": "METRO_MANILA",
      "type": "string",
      "description": "Metro Manila province code for address testing"
    },
    {
      "key": "cebu_code",
      "value": "CEBU",
      "type": "string",
      "description": "Cebu province code for address testing"
    },
    {
      "key": "davao_code",
      "value": "DAVAO_REGION",
      "type": "string",
      "description": "Davao region code for address testing"
    }
  ],
  "item": [
    {
      "name": "üè• Server Health & Info",
      "description": "Basic server information and health check endpoints",
      "item": [
        {
          "name": "Get Server Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('version');",
                  "    pm.expect(responseJson).to.have.property('environment');",
                  "    pm.expect(responseJson).to.have.property('database');",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});",
                  "",
                  "pm.test('Database type is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.database).to.be.oneOf(['mysql', 'memory', 'sqlite', 'postgres']);",
                  "});",
                  "",
                  "pm.test('Endpoints object contains API routes', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.endpoints).to.have.property('health');",
                  "    pm.expect(responseJson.endpoints).to.have.property('todos');",
                  "    // Check for patient and user endpoints if they exist",
                  "    if (responseJson.endpoints.patients) {",
                  "        pm.expect(responseJson.endpoints.patients).to.be.a('string');",
                  "    }",
                  "    if (responseJson.endpoints.users) {",
                  "        pm.expect(responseJson.endpoints.users).to.be.a('string');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": [
                "{{baseUrl}}"
              ]
            },
            "description": "Get basic server information including version, environment, and available endpoints"
          }
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Timestamp is valid ISO string', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "health"
              ]
            },
            "description": "Health check endpoint to verify server is running"
          }
        }
      ]
    },
    {
      "name": "üîê Authentication API",
      "description": "Authentication and user registration endpoints for healthcare clinic\n\n## Authentication Architecture\nThe API implements a JWT-based authentication system with role-based access control:\n\n**User Registration (POST /api/auth/register):**\n- `firstName`, `lastName`: Personal names (required)\n- `email`: Contact email (required, must be unique)\n- `password`: User password (required, minimum validation applies)\n- `role`: User role - 'admin', 'doctor', or 'receptionist' (required)\n- `mobile`: Personal contact number (optional)\n- **Doctor-specific fields** (required only when role='doctor'):\n  - `specialization`: Medical specialization\n  - `licenseNumber`: Medical license number (optional)\n  - `experienceYears`: Years of practice (optional)\n\n**User Login (POST /api/auth/login):**\n- Accepts either `email` OR `username` + `password`\n- Returns JWT token with user profile information\n- Token contains user role for authorization\n\n**API Response Structure:**\nAll responses follow a consistent format:\n```json\n{\n  \"success\": true,\n  \"data\": { /* response data */ },\n  \"message\": \"Optional message\"\n}\n```\n\n**Error Handling:**\n- Validation errors return detailed field-specific messages\n- Authentication errors use standard HTTP status codes\n- All errors include descriptive error messages\n\n**Role-Based Access:**\n- `admin`: Full system access\n- `doctor`: Medical professional access with doctor profile\n- `receptionist`: Front desk and appointment management access\n\n**Security Features:**\n- Password hashing using bcrypt\n- JWT tokens for stateless authentication\n- Email uniqueness validation\n- Username auto-generation from email prefix\n- Role-based authorization",
      "item": [
        {
          "name": "User Registration",
          "item": [
            {
              "name": "Register Admin User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"System\",\n  \"lastName\": \"Administrator\",\n  \"email\": \"admin@clinic.com\",\n  \"password\": \"AdminSecure123!\",\n  \"role\": \"admin\",\n  \"mobile\": \"09123456789\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register a new admin user with full system access"
              },
              "response": []
            },
            {
              "name": "Register Doctor User - Full Profile",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Maria\",\n  \"lastName\": \"Santos\",\n  \"email\": \"santos@clinic.com\",\n  \"password\": \"DoctorSecure123!\",\n  \"role\": \"doctor\",\n  \"mobile\": \"09278479061\",\n  \"specialization\": \"Cardiology\",\n  \"licenseNumber\": \"MD-12345\",\n  \"experienceYears\": 15\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register a new doctor with complete profile information including medical specialization"
              },
              "response": []
            },
            {
              "name": "Register Doctor User - Minimal Profile",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Reyes\",\n  \"email\": \"reyes@clinic.com\",\n  \"password\": \"DoctorSecure123!\",\n  \"role\": \"doctor\",\n  \"specialization\": \"General Practice\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register a doctor with only required fields (specialization required for doctors)"
              },
              "response": []
            },
            {
              "name": "Register Receptionist User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Anna\",\n  \"lastName\": \"Cruz\",\n  \"email\": \"anna.cruz@clinic.com\",\n  \"password\": \"ReceptionSecure123!\",\n  \"role\": \"receptionist\",\n  \"mobile\": \"09987654321\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register a new receptionist user for front desk operations"
              },
              "response": []
            },
            {
              "name": "Register User - No Mobile",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Doe\",\n  \"email\": \"jane.doe@clinic.com\",\n  \"password\": \"UserSecure123!\",\n  \"role\": \"receptionist\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register user without mobile number (mobile is optional)"
              },
              "response": []
            },
            {
              "name": "Register Doctor - New Graduate",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Patricia\",\n  \"lastName\": \"Lopez\",\n  \"email\": \"lopez@clinic.com\",\n  \"password\": \"DoctorSecure123!\",\n  \"role\": \"doctor\",\n  \"mobile\": \"09456789012\",\n  \"specialization\": \"Family Medicine\",\n  \"licenseNumber\": \"MD-67890\",\n  \"experienceYears\": 1\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register a newly graduated doctor with minimal experience"
              },
              "response": []
            },
            {
              "name": "Register Doctor - Senior Specialist",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Roberto\",\n  \"lastName\": \"Fernandez\",\n  \"email\": \"fernandez@clinic.com\",\n  \"password\": \"DoctorSecure123!\",\n  \"role\": \"doctor\",\n  \"mobile\": \"09567890123\",\n  \"specialization\": \"Neurology\",\n  \"licenseNumber\": \"MD-54321\",\n  \"experienceYears\": 25\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register a senior medical specialist with extensive experience"
              },
              "response": []
            }
          ],
          "description": "User registration endpoints for creating new user accounts with different roles"
        },
        {
          "name": "Registration Validation Tests",
          "item": [
            {
              "name": "Register - Missing Required Fields (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"email\": \"incomplete@clinic.com\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Test validation error - missing required fields (lastName, password, role)"
              },
              "response": []
            },
            {
              "name": "Register - Invalid Email Format (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"invalid-email-format\",\n  \"password\": \"TestPassword123!\",\n  \"role\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Test validation error - invalid email format"
              },
              "response": []
            },
            {
              "name": "Register - Weak Password (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.weak@clinic.com\",\n  \"password\": \"123\",\n  \"role\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Test validation error - password too short/weak"
              },
              "response": []
            },
            {
              "name": "Register - Invalid Role (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.invalidrole@clinic.com\",\n  \"password\": \"TestPassword123!\",\n  \"role\": \"invalid_role\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Test validation error - invalid role (must be admin, doctor, or receptionist)"
              },
              "response": []
            },
            {
              "name": "Register Doctor - Missing Specialization (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"incomplete@clinic.com\",\n  \"password\": \"DoctorSecure123!\",\n  \"role\": \"doctor\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Test validation error - doctor role requires specialization field"
              },
              "response": []
            },
            {
              "name": "Register - Duplicate Email (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"admin@clinic.com\",\n  \"password\": \"TestPassword123!\",\n  \"role\": \"receptionist\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Test validation error - duplicate email (use email from previous successful registration)"
              },
              "response": []
            }
          ],
          "description": "Test cases for registration validation and error handling"
        },
        {
          "name": "User Authentication",
          "item": [
            {
              "name": "Login with Email - Admin",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"admin@clinic.com\",\n  \"password\": \"AdminSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Login using email address for admin user"
              },
              "response": []
            },
            {
              "name": "Login with Email - Doctor",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"santos@clinic.com\",\n  \"password\": \"DoctorSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Login using email address for doctor user"
              },
              "response": []
            },
            {
              "name": "Login with Email - Receptionist",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"anna.cruz@clinic.com\",\n  \"password\": \"ReceptionSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Login using email address for receptionist user"
              },
              "response": []
            },
            {
              "name": "Login with Username - Admin",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"AdminSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Login using username (auto-generated from email prefix)"
              },
              "response": []
            },
            {
              "name": "Login with Username - Doctor",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"santos\",\n  \"password\": \"DoctorSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Login using username for doctor user"
              },
              "response": []
            }
          ],
          "description": "User authentication endpoints for logging in with email or username"
        },
        {
          "name": "Login Validation Tests",
          "item": [
            {
              "name": "Login - Missing Password (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"admin@clinic.com\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Test validation error - missing password field"
              },
              "response": []
            },
            {
              "name": "Login - Missing Email/Username (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"AdminSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Test validation error - missing email or username field"
              },
              "response": []
            },
            {
              "name": "Login - Invalid Email (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"nonexistent@clinic.com\",\n  \"password\": \"AdminSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Test authentication error - user not found"
              },
              "response": []
            },
            {
              "name": "Login - Invalid Username (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"nonexistent\",\n  \"password\": \"AdminSecure123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Test authentication error - username not found"
              },
              "response": []
            },
            {
              "name": "Login - Wrong Password (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"admin@clinic.com\",\n  \"password\": \"WrongPassword123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Test authentication error - invalid password"
              },
              "response": []
            },
            {
              "name": "Login - Empty Credentials (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ]
                },
                "description": "Test validation error - empty credential fields"
              },
              "response": []
            }
          ],
          "description": "Test cases for login validation and authentication error handling"
        },
        {
          "name": "Special Registration Cases",
          "item": [
            {
              "name": "Register User - Unicode Characters",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jos√©\",\n  \"lastName\": \"M√ºller\",\n  \"email\": \"jose.muller@clinic.com\",\n  \"password\": \"UnicodeSecure123!\",\n  \"role\": \"doctor\",\n  \"mobile\": \"09123456789\",\n  \"specialization\": \"Pediatrics\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register user with Unicode characters in names"
              },
              "response": []
            },
            {
              "name": "Register User - Special Characters in Names",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Mary-Ann O'Connor\",\n  \"lastName\": \"Smith-Wilson\",\n  \"email\": \"mary.ann@clinic.com\",\n  \"password\": \"SpecialSecure123!\",\n  \"role\": \"receptionist\",\n  \"mobile\": \"09234567890\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register user with hyphens and apostrophes in names"
              },
              "response": []
            },
            {
              "name": "Register User - Long Email Address",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Very\",\n  \"lastName\": \"LongEmailUser\",\n  \"email\": \"very.long.email.address.with.many.dots@very-long-domain-name.clinic.com\",\n  \"password\": \"LongEmailSecure123!\",\n  \"role\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                },
                "description": "Register user with very long email address"
              },
              "response": []
            },
            {
              "name": "Register Doctor - All Specializations",
              "item": [
                {
                  "name": "Register - Cardiology",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"firstName\": \"Heart\",\n  \"lastName\": \"Specialist\",\n  \"email\": \"cardiologist@clinic.com\",\n  \"password\": \"CardioSecure123!\",\n  \"role\": \"doctor\",\n  \"specialization\": \"Cardiology\",\n  \"licenseNumber\": \"CARD-001\",\n  \"experienceYears\": 10\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/auth/register",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "register"
                      ]
                    },
                    "description": "Register cardiologist"
                  }
                },
                {
                  "name": "Register - Neurology",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"firstName\": \"Brain\",\n  \"lastName\": \"Expert\",\n  \"email\": \"neurologist@clinic.com\",\n  \"password\": \"NeuroSecure123!\",\n  \"role\": \"doctor\",\n  \"specialization\": \"Neurology\",\n  \"licenseNumber\": \"NEURO-001\",\n  \"experienceYears\": 20\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/auth/register",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "register"
                      ]
                    },
                    "description": "Register neurologist"
                  }
                },
                {
                  "name": "Register - Pediatrics",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"firstName\": \"Child\",\n  \"lastName\": \"Care\",\n  \"email\": \"pediatrician@clinic.com\",\n  \"password\": \"PediatricSecure123!\",\n  \"role\": \"doctor\",\n  \"specialization\": \"Pediatrics\",\n  \"licenseNumber\": \"PEDI-001\",\n  \"experienceYears\": 8\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/auth/register",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "register"
                      ]
                    },
                    "description": "Register pediatrician"
                  }
                },
                {
                  "name": "Register - Orthopedics",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"firstName\": \"Bone\",\n  \"lastName\": \"Surgeon\",\n  \"email\": \"orthopedist@clinic.com\",\n  \"password\": \"OrthoSecure123!\",\n  \"role\": \"doctor\",\n  \"specialization\": \"Orthopedics\",\n  \"licenseNumber\": \"ORTHO-001\",\n  \"experienceYears\": 12\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/auth/register",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "register"
                      ]
                    },
                    "description": "Register orthopedic surgeon"
                  }
                }
              ]
            }
          ],
          "description": "Special test cases for edge cases and comprehensive coverage"
        }
      ]
    },
    {
      "name": "üë• User Management API",
      "description": "User management operations including listing users and password changes",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Users array contains valid user objects', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const user = responseJson.data[0];",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('fullName');",
                  "        pm.expect(user).to.have.property('role');",
                  "        pm.expect(user).to.have.property('mobile');",
                  "        pm.expect(user.id).to.be.a('string');",
                  "        pm.expect(user.fullName).to.be.a('string');",
                  "        pm.expect(user.role).to.be.oneOf(['admin', 'doctor', 'receptionist']);",
                  "        // mobile can be string or null",
                  "        if (user.mobile !== null) {",
                  "            pm.expect(user.mobile).to.be.a('string');",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "pm.test('Test user is in the list', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const testUserId = pm.collectionVariables.get('testUserId');",
                  "    if (testUserId) {",
                  "        const testUser = responseJson.data.find(user => user.id === testUserId);",
                  "        pm.expect(testUser).to.exist;",
                  "        pm.expect(testUser.role).to.equal('admin');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users"
              ]
            },
            "description": "Retrieve all users in the system with their basic information"
          }
        },
        {
          "name": "Change User Password - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('message', 'Password updated.');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newPassword\": \"NewPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}",
                "password"
              ]
            },
            "description": "Change password for a specific user by their ID"
          }
        },
        {
          "name": "Change Password - User Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 500', function () {",
                  "    // Could be 500 if user not found, or 400 if ID validation fails",
                  "    pm.expect([400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error message indicates user not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error.toLowerCase()).to.include('not found');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newPassword\": \"ValidPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/nonexistent-user-id/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "nonexistent-user-id",
                "password"
              ]
            },
            "description": "Test error handling when trying to change password for a non-existent user"
          }
        },
        {
          "name": "Change Password - Missing Password Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error indicates missing password field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(function(msg) {",
                  "        return msg.includes('password') && (msg.includes('required') || msg.includes('missing'));",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"oldPassword\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}",
                "password"
              ]
            },
            "description": "Test validation error when newPassword field is missing from request"
          }
        }
      ]
    },
    {
      "name": "üë®‚Äç‚öïÔ∏è Doctor Management API",
      "description": "Doctor profile management endpoints for healthcare clinic\n\n## Doctor Profile Architecture\nThe API implements a User-Doctor relationship pattern to avoid data duplication:\n\n**User Information (managed by User API):**\n- `firstName`, `lastName`: Personal names\n- `email`: Contact email\n- `username`: System username\n- `mobile`: Personal contact number\n- `role`: Must be 'DOCTOR' for doctor profiles\n\n**Doctor Profile Information:**\n- `userId`: Reference to User entity\n- `specialization`: Medical specialization\n- `medicalContactNumber`: Professional contact separate from personal\n- `licenseNumber`: Medical license number (optional)\n- `yearsOfExperience`: Years of practice (optional)\n- `isActive`: Profile status\n\n**Phone Number Validation:**\nThe `medicalContactNumber` field supports multiple formats:\n- **Philippine Mobile**: 11 digits starting with '09' (e.g., '09278479061')\n- **Philippine Landline**: Area code + 7-8 digits (e.g., '028765432' for Metro Manila)\n- **US Format**: 10 digits (e.g., '5551234567') or 11 digits starting with '1'\n\n**API Response Structure:**\nAPI responses combine User + Doctor information for convenience:\n- User fields: `firstName`, `lastName`, `fullName`, `email`, `username`, `personalContactNumber`, `role`\n- Doctor fields: `specialization`, `medicalContactNumber`, `licenseNumber`, `yearsOfExperience`, `isActive`\n\n**Note:** Before creating doctor profiles, ensure corresponding User accounts exist with role='DOCTOR'.",
      "item": [
        {
          "name": "Get All Doctors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Get all doctor profiles with full User + Doctor information"
          },
          "response": []
        },
        {
          "name": "Get Active Doctors Only",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors?active=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ],
              "query": [
                {
                  "key": "active",
                  "value": "true",
                  "description": "Filter to show only active doctors"
                }
              ]
            },
            "description": "Get only active doctor profiles"
          },
          "response": []
        },
        {
          "name": "Get Doctors Summary Format",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors?format=summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ],
              "query": [
                {
                  "key": "format",
                  "value": "summary",
                  "description": "Get lightweight summary format for listings"
                }
              ]
            },
            "description": "Get doctor profiles in summary format (lighter payload for listings)"
          },
          "response": []
        },
        {
          "name": "Get Doctor by Profile ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors/{{doctor_profile_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "{{doctor_profile_id}}"
              ]
            },
            "description": "Get specific doctor profile by doctor profile ID"
          },
          "response": []
        },
        {
          "name": "Get Doctor by User ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors/user/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "user",
                "{{user_id}}"
              ]
            },
            "description": "Get doctor profile by User ID (useful when you know the user but not the doctor profile ID)"
          },
          "response": []
        },
        {
          "name": "Get Doctors by Specialization",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors/specialization/{{specialization}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "specialization",
                "{{specialization}}"
              ]
            },
            "description": "Get doctors filtered by medical specialization"
          },
          "response": []
        },
        {
          "name": "Get Cardiologists (Active Only)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors/specialization/Cardiology?active=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "specialization",
                "Cardiology"
              ],
              "query": [
                {
                  "key": "active",
                  "value": "true",
                  "description": "Show only active cardiologists"
                }
              ]
            },
            "description": "Get active cardiologists only"
          },
          "response": []
        },
        {
          "name": "Check if User Has Doctor Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors/check/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "check",
                "{{user_id}}"
              ]
            },
            "description": "Check if a user already has a doctor profile (returns {exists: boolean})"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - General Practitioner",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-001\",\n  \"specialization\": \"General Practice\",\n  \"medicalContactNumber\": \"09278479061\",\n  \"licenseNumber\": \"MD-12345\",\n  \"yearsOfExperience\": 8\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Create a new doctor profile for an existing user"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - Specialist",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-002\",\n  \"specialization\": \"Cardiology\",\n  \"medicalContactNumber\": \"09987654321\",\n  \"licenseNumber\": \"MD-23456\",\n  \"yearsOfExperience\": 15\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Create doctor profile for a medical specialist"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - Minimal Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-003\",\n  \"specialization\": \"Pediatrics\",\n  \"medicalContactNumber\": \"09123456789\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Create doctor profile with minimal required fields only"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - New Graduate",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-004\",\n  \"specialization\": \"Family Medicine\",\n  \"medicalContactNumber\": \"09456789012\",\n  \"licenseNumber\": \"MD-34567\",\n  \"yearsOfExperience\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Create profile for a newly graduated doctor"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - Senior Specialist",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-005\",\n  \"specialization\": \"Neurology\",\n  \"medicalContactNumber\": \"09567890123\",\n  \"licenseNumber\": \"MD-45678\",\n  \"yearsOfExperience\": 25\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Create profile for a senior medical specialist"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - Philippine Landline",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-006\",\n  \"specialization\": \"Orthopedics\",\n  \"medicalContactNumber\": \"028765432\",\n  \"licenseNumber\": \"MD-56789\",\n  \"yearsOfExperience\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Create doctor profile with Philippine landline number (Metro Manila area code)"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - US Phone Format",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-007\",\n  \"specialization\": \"Psychiatry\",\n  \"medicalContactNumber\": \"5551234567\",\n  \"licenseNumber\": \"MD-67890\",\n  \"yearsOfExperience\": 7\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Create doctor profile with US phone number format (10 digits)"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - Invalid Phone Format (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-008\",\n  \"specialization\": \"Dermatology\",\n  \"medicalContactNumber\": \"08123456789\",\n  \"licenseNumber\": \"MD-78901\",\n  \"yearsOfExperience\": 3\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Test validation error - invalid Philippine phone (starts with 08 instead of 09)"
          },
          "response": []
        },
        {
          "name": "Create Doctor Profile - Missing Required Fields (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-doctor-009\",\n  \"medicalContactNumber\": \"09123456789\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors"
              ]
            },
            "description": "Test validation error - missing required specialization field"
          },
          "response": []
        },
        {
          "name": "Update Doctor Profile - Change Specialization",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"specialization\": \"Internal Medicine\",\n  \"yearsOfExperience\": 12\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors/{{doctor_profile_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "{{doctor_profile_id}}"
              ]
            },
            "description": "Update doctor's specialization and experience"
          },
          "response": []
        },
        {
          "name": "Update Doctor Profile - Change Contact",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"medicalContactNumber\": \"09999888777\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors/{{doctor_profile_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "{{doctor_profile_id}}"
              ]
            },
            "description": "Update doctor's professional contact number"
          },
          "response": []
        },
        {
          "name": "Update Doctor Profile - Add License",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"licenseNumber\": \"MD-98765\",\n  \"yearsOfExperience\": 5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors/{{doctor_profile_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "{{doctor_profile_id}}"
              ]
            },
            "description": "Add license number and update experience for existing doctor"
          },
          "response": []
        },
        {
          "name": "Deactivate Doctor Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors/{{doctor_profile_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "{{doctor_profile_id}}"
              ]
            },
            "description": "Deactivate doctor profile (soft delete)"
          },
          "response": []
        },
        {
          "name": "Reactivate Doctor Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/doctors/{{doctor_profile_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "{{doctor_profile_id}}"
              ]
            },
            "description": "Reactivate previously deactivated doctor profile"
          },
          "response": []
        },
        {
          "name": "Delete Doctor Profile",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/doctors/{{doctor_profile_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "doctors",
                "{{doctor_profile_id}}"
              ]
            },
            "description": "Delete doctor profile (typically sets isActive=false rather than hard delete)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè• Patient Management API",
      "description": "Patient CRUD operations with comprehensive validation and error handling",
      "item": [
        {
          "name": "Get Patient Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has valid structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.total).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/total",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients",
                "total"
              ]
            },
            "description": "Get patient statistics including total count"
          }
        },
        {
          "name": "Create Patient - Complete Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created patient has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName', 'Juan');",
                  "    pm.expect(patient).to.have.property('lastName', 'Dela Cruz');",
                  "    pm.expect(patient).to.have.property('middleName', 'Santos');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender', 'Male');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "    pm.expect(patient).to.have.property('createdAt');",
                  "    pm.expect(patient).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Address information is structured correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    // Check for structured address fields",
                  "    pm.expect(patient).to.have.property('houseNumber');",
                  "    pm.expect(patient).to.have.property('streetName');",
                  "    pm.expect(patient).to.have.property('barangay');",
                  "    pm.expect(patient).to.have.property('cityMunicipality');",
                  "    pm.expect(patient).to.have.property('province');",
                  "    // Check for computed address field for backward compatibility",
                  "    if (patient.address) {",
                  "        pm.expect(patient.address).to.be.a('string');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Guardian information is included', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('guardianName');",
                  "    pm.expect(patient).to.have.property('guardianGender');",
                  "    pm.expect(patient).to.have.property('guardianRelationship');",
                  "    pm.expect(patient).to.have.property('guardianContactNumber');",
                  "});",
                  "",
                  "pm.test('Patient ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient.id).to.be.a('string');",
                  "    pm.expect(patient.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('testPatientId', patient.id);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Juan\",\n  \"lastName\": \"Dela Cruz\",\n  \"middleName\": \"Santos\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"gender\": \"Male\",\n  \"contactNumber\": \"09171234567\",\n  \"houseNumber\": \"123\",\n  \"streetName\": \"Main Street\",\n  \"barangay\": \"Barangay Santo Ni√±o\",\n  \"cityMunicipality\": \"Quezon City\",\n  \"province\": \"Metro Manila\",\n  \"guardianName\": \"Maria Dela Cruz\",\n  \"guardianGender\": \"Female\",\n  \"guardianRelationship\": \"Mother\",\n  \"guardianContactNumber\": \"09187654321\",\n  \"guardianHouseNumber\": \"123\",\n  \"guardianStreetName\": \"Main Street\",\n  \"guardianBarangay\": \"Barangay Santo Ni√±o\",\n  \"guardianCityMunicipality\": \"Quezon City\",\n  \"guardianProvince\": \"Metro Manila\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Create a new patient with complete information including guardian details"
          }
        },
        {
          "name": "Create Patient - Minimal Required Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Created patient has minimal required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName', 'Ana');",
                  "    pm.expect(patient).to.have.property('lastName', 'Garcia');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender', 'Female');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "});",
                  "",
                  "pm.test('Address fields are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    // At least one address field should be present",
                  "    const hasAddressField = patient.houseNumber || patient.streetName || ",
                  "                           patient.barangay || patient.cityMunicipality || patient.province;",
                  "    pm.expect(hasAddressField).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Ana\",\n  \"lastName\": \"Garcia\",\n  \"dateOfBirth\": \"1985-12-25\",\n  \"gender\": \"Female\",\n  \"contactNumber\": \"09281234567\",\n  \"houseNumber\": \"456\",\n  \"streetName\": \"Oak Avenue\",\n  \"barangay\": \"Poblacion\",\n  \"cityMunicipality\": \"Makati City\",\n  \"province\": \"Metro Manila\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Create a patient with minimal required data (no guardian information)"
          }
        },
        {
          "name": "Get All Patients",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Patient list items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const patient = responseJson.data[0];",
                  "        pm.expect(patient).to.have.property('id');",
                  "        pm.expect(patient).to.have.property('fullName');",
                  "        pm.expect(patient).to.have.property('dateOfBirth');",
                  "        pm.expect(patient).to.have.property('gender');",
                  "        pm.expect(patient).to.have.property('contactNumber');",
                  "        pm.expect(patient).to.have.property('age');",
                  "        pm.expect(patient.age).to.be.a('number');",
                  "        pm.expect(patient.age).to.be.at.least(0);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Retrieve all patients with list-optimized data structure"
          }
        },
        {
          "name": "Get Patient by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Patient has complete information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName');",
                  "    pm.expect(patient).to.have.property('lastName');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "    pm.expect(patient).to.have.property('age');",
                  "    pm.expect(patient).to.have.property('createdAt');",
                  "    pm.expect(patient).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/{{testPatientId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients",
                "{{testPatientId}}"
              ]
            },
            "description": "Retrieve a specific patient by ID with complete information"
          }
        },
        {
          "name": "Get Patient by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404 or 500', function () {",
                  "    // Could be 404 for not found or 500 for invalid ID format",
                  "    pm.expect([404, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error message indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => ",
                  "        msg.includes('not found') || msg.includes('invalid')",
                  "    );",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/nonexistent-patient-id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients",
                "nonexistent-patient-id"
              ]
            },
            "description": "Test error handling when requesting a patient that doesn't exist"
          }
        },
        {
          "name": "Create Patient - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.equal('VALIDATION_ERROR');",
                  "    pm.expect(responseJson.error).to.include('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Incomplete\",\n  \"dateOfBirth\": \"1990-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Test validation error when required patient fields are missing"
          }
        }
      ]
    },
    {
      "name": "üìÖ Schedule Management API",
      "description": "Schedule management endpoints for healthcare clinic\n\n## Schedule Management Architecture\nThe API manages doctor schedules with date and time slots:\n\n**Schedule Information:**\n- `id`: Unique schedule identifier\n- `doctorName`: Name of the doctor\n- `date`: Schedule date in ISO format (YYYY-MM-DD)\n- `time`: Schedule time in 24-hour format (HH:MM)\n- `formattedDate`: Human-readable date (optional)\n- `formattedTime`: 12-hour format with AM/PM (optional)\n- `createdAt`: Creation timestamp\n- `updatedAt`: Last update timestamp\n\n**Date and Time Validation:**\nThe API enforces proper date and time formats:\n- **Date Format**: ISO date string (YYYY-MM-DD)\n- **Time Format**: 24-hour format (HH:MM) or 12-hour with AM/PM\n- **Future Dates**: Schedules are typically for future dates\n\n**Query Parameters:**\n- `activeOnly`: Boolean to filter only future schedules (default: true)\n- Date-based filtering for specific dates\n- Doctor-based filtering by doctor name\n\n**API Response Structure:**\nAll responses follow a consistent format:\n- `success`: Boolean indicating operation success\n- `data`: The actual response data (schedule object or array)\n- `message`: Success/error message for operations\n\n**Statistics:**\nThe API provides schedule statistics including:\n- Total schedules count\n- Today's schedules count\n- Upcoming schedules count\n- Unique doctors count",
      "item": [
        {
          "name": "Get All Schedules",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Get all schedules. By default returns only active (future) schedules."
          },
          "response": []
        },
        {
          "name": "Get All Schedules Including Past",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules?activeOnly=false",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ],
              "query": [
                {
                  "key": "activeOnly",
                  "value": "false",
                  "description": "Include past schedules as well"
                }
              ]
            },
            "description": "Get all schedules including past ones by setting activeOnly to false"
          },
          "response": []
        },
        {
          "name": "Get Schedule Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/stats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "stats"
              ]
            },
            "description": "Get schedule statistics including total, today's, upcoming schedules and unique doctors count"
          },
          "response": []
        },
        {
          "name": "Get Today's Doctor",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/today",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "today"
              ]
            },
            "description": "Get the first scheduled doctor for today. Returns 'N/A' if no doctor is scheduled for today."
          },
          "response": []
        },
        {
          "name": "Get Schedules by Date",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/date/{{date}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "date",
                "{{date}}"
              ]
            },
            "description": "Get all schedules for a specific date (YYYY-MM-DD format)"
          },
          "response": []
        },
        {
          "name": "Get Schedules by Specific Date",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/date/2024-12-25",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "date",
                "2024-12-25"
              ]
            },
            "description": "Example: Get all schedules for Christmas Day 2024"
          },
          "response": []
        },
        {
          "name": "Get Schedules by Doctor Name",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/doctor/{{doctor_name}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "doctor",
                "{{doctor_name}}"
              ]
            },
            "description": "Get all schedules for a specific doctor by name"
          },
          "response": []
        },
        {
          "name": "Get Schedules by Specific Doctor",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/doctor/Dr. Smith",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "doctor",
                "Dr. Smith"
              ]
            },
            "description": "Example: Get all schedules for Dr. Smith"
          },
          "response": []
        },
        {
          "name": "Get Schedule by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/{{schedule_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "{{schedule_id}}"
              ]
            },
            "description": "Get a specific schedule by its ID"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Morning Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Johnson\",\n  \"date\": \"2024-12-20\",\n  \"time\": \"09:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Create a new schedule for a morning appointment"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Afternoon Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Williams\",\n  \"date\": \"2024-12-21\",\n  \"time\": \"14:30\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Create a new schedule for an afternoon appointment"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Evening Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Brown\",\n  \"date\": \"2024-12-22\",\n  \"time\": \"18:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Create a new schedule for an evening appointment"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Weekend Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Davis\",\n  \"date\": \"2024-12-28\",\n  \"time\": \"10:30\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Create a new schedule for a weekend appointment"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Emergency Slot",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Emergency\",\n  \"date\": \"2024-12-20\",\n  \"time\": \"22:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Create a new schedule for an emergency late-night slot"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Missing Doctor Name (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"2024-12-20\",\n  \"time\": \"09:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Test validation error - missing required doctorName field"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Invalid Date Format (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Test\",\n  \"date\": \"12/20/2024\",\n  \"time\": \"09:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Test validation error - invalid date format (should be YYYY-MM-DD)"
          },
          "response": []
        },
        {
          "name": "Create Schedule - Invalid Time Format (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Test\",\n  \"date\": \"2024-12-20\",\n  \"time\": \"25:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules"
              ]
            },
            "description": "Test validation error - invalid time format (hour > 24)"
          },
          "response": []
        },
        {
          "name": "Update Schedule - Change Doctor",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. NewDoctor\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules/{{schedule_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "{{schedule_id}}"
              ]
            },
            "description": "Update schedule to change the assigned doctor"
          },
          "response": []
        },
        {
          "name": "Update Schedule - Change Date and Time",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"2024-12-25\",\n  \"time\": \"15:30\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules/{{schedule_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "{{schedule_id}}"
              ]
            },
            "description": "Update schedule to change date and time"
          },
          "response": []
        },
        {
          "name": "Update Schedule - Complete Update",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. UpdatedDoctor\",\n  \"date\": \"2024-12-30\",\n  \"time\": \"11:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules/{{schedule_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "{{schedule_id}}"
              ]
            },
            "description": "Update all schedule fields at once"
          },
          "response": []
        },
        {
          "name": "Update Schedule - Reschedule to Morning",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"time\": \"08:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules/{{schedule_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "{{schedule_id}}"
              ]
            },
            "description": "Reschedule appointment to early morning slot"
          },
          "response": []
        },
        {
          "name": "Update Schedule - Move to Next Week",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"2025-01-03\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules/{{schedule_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "{{schedule_id}}"
              ]
            },
            "description": "Move schedule to next week"
          },
          "response": []
        },
        {
          "name": "Update Schedule - Invalid ID (Should Fail)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctorName\": \"Dr. Test\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/schedules/invalid-id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "invalid-id"
              ]
            },
            "description": "Test error case - attempt to update schedule with invalid ID"
          },
          "response": []
        },
        {
          "name": "Delete Schedule",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/{{schedule_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "{{schedule_id}}"
              ]
            },
            "description": "Delete a schedule by ID"
          },
          "response": []
        },
        {
          "name": "Delete Schedule - Invalid ID (Should Fail)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/schedules/nonexistent-id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "schedules",
                "nonexistent-id"
              ]
            },
            "description": "Test error case - attempt to delete schedule with invalid/nonexistent ID"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìã Appointment Management API",
      "description": "Appointment management endpoints for healthcare clinic\n\n## Appointment Management Architecture\nThe API manages patient appointments with comprehensive business logic:\n\n**Appointment Information:**\n- `id`: Unique appointment identifier\n- `patientId`: Reference to patient record (foreign key to User entity)\n- `reasonForVisit`: Purpose/reason for the appointment\n- `appointmentDate`: Date in ISO format (YYYY-MM-DD)\n- `appointmentTime`: Time in 24-hour format (HH:MM)\n- `status`: Appointment status ('scheduled', 'confirmed', 'cancelled')\n- `doctorId`: Reference to doctor record (foreign key to Doctor entity)\n- `createdAt`: Creation timestamp\n- `updatedAt`: Last update timestamp\n\n**Note:** Patient name and contact info are retrieved from User entity via patientId for data consistency\n\n**Business Rules Implemented:**\n- **Time Slot Limits**: Maximum 4 appointments per time slot\n- **Duplicate Prevention**: One appointment per patient per day\n- **Past Date Validation**: Cannot schedule appointments for past dates\n- **Status Transitions**: scheduled ‚Üí confirmed/cancelled\n- **Patient Validation**: Patient must exist before appointment creation\n\n**Appointment Status Flow:**\n1. **scheduled**: Initial status when appointment is created\n2. **confirmed**: Appointment is confirmed by staff/patient\n3. **cancelled**: Appointment is cancelled\n\n**API Response Structure:**\nAll responses follow a consistent format:\n- `success`: Boolean indicating operation success\n- `data`: The actual response data (appointment object or array)\n- `message`: Success/error message for operations\n\n**Query Capabilities:**\n- Get appointments by patient ID\n- Get appointments by date range\n- Get today's appointments\n- Get confirmed appointments only\n- Get appointment statistics and summaries\n\n**Time Format Support:**\nThe API accepts various time formats:\n- 24-hour format: '14:30', '09:00'\n- 12-hour format: '2:30 PM', '9:00 AM'\n- Automatically converts to consistent format\n\n**Integration with Other APIs:**\nAppointments API integrates with:\n- **Patient API**: Validates patient existence and retrieves contact info\n- **Doctor API**: Associates appointments with doctor profiles\n- **Schedule API**: Coordinates with doctor availability",
      "item": [
        {
          "name": "üìã Basic CRUD Operations",
          "item": [
            {
              "name": "Get All Appointments",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "Get all appointments in the system\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"apt_123\",\n      \"patientId\": 1,\n      \"reasonForVisit\": \"Regular checkup\",\n      \"appointmentDate\": \"2025-08-05\",\n      \"appointmentTime\": \"14:30\",\n      \"status\": \"scheduled\",\n      \"doctorId\": 2,\n      \"createdAt\": \"2025-08-02T10:00:00Z\",\n      \"updatedAt\": null\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Administrative overview\n- Appointment list displays\n- Data analysis and reporting"
              },
              "response": []
            },
            {
              "name": "Get Appointment by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/{{appointment_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "{{appointment_id}}"
                  ]
                },
                "description": "Get a specific appointment by its ID\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Use Cases:**\n- View appointment details\n- Edit appointment forms\n- Appointment confirmation pages"
              },
              "response": []
            },
            {
              "name": "Create New Appointment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": {{sample_patient_id}},\n  \"reasonForVisit\": \"Regular checkup\",\n  \"appointmentDate\": \"{{future_date}}\",\n  \"appointmentTime\": \"14:30\",\n  \"doctorId\": {{sample_doctor_id}}\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "Create a new appointment\n\n**Required Fields:**\n- `patientId`: Must be a valid patient ID from the system (foreign key to User entity)\n- `reasonForVisit`: Purpose of the appointment\n- `appointmentDate`: Date in YYYY-MM-DD format (future date only)\n- `appointmentTime`: Time in HH:MM format or with AM/PM\n- `doctorId`: Must be a valid doctor ID from the system (foreign key to Doctor entity)\n\n**Optional Fields:**\n- `status`: Defaults to 'scheduled' if not provided\n\n**Business Validations:**\n- Patient must exist in the database\n- Doctor must exist in the database\n- Date cannot be in the past\n- Maximum 4 appointments per time slot\n- One appointment per patient per day\n- Time slot must be valid\n\n**Expected Response:** 201 Created with appointment details"
              },
              "response": []
            },
            {
              "name": "Update Appointment",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reasonForVisit\": \"Follow-up consultation\",\n  \"appointmentDate\": \"{{updated_date}}\",\n  \"appointmentTime\": \"15:00\",\n  \"doctorId\": {{updated_doctor_id}}\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments/{{appointment_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "{{appointment_id}}"
                  ]
                },
                "description": "Update an existing appointment\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Updatable Fields:**\n- `patientId`: Patient ID (foreign key to User entity)\n- `reasonForVisit`: Purpose of visit\n- `appointmentDate`: New date (must be future date)\n- `appointmentTime`: New time\n- `doctorId`: Assigned doctor ID (foreign key to Doctor entity)\n- `status`: Appointment status\n\n**Business Validations:**\n- All create validations apply\n- Cannot update cancelled appointments\n- Time slot availability checked for new time\n- Patient and doctor must exist in database\n\n**Note:** Use dedicated endpoints for status changes (confirm/cancel/reschedule)"
              },
              "response": []
            },
            {
              "name": "Delete Appointment",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/{{appointment_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "{{appointment_id}}"
                  ]
                },
                "description": "Delete an appointment permanently\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Use Cases:**\n- Administrative cleanup\n- Error correction\n- Patient request for complete removal\n\n**Note:** For most cases, use 'Cancel Appointment' instead of deletion\n\n**Expected Response:** 200 OK with success message"
              },
              "response": []
            }
          ],
          "description": "Basic CRUD operations for appointment management"
        },
        {
          "name": "üîÑ Status Management",
          "item": [
            {
              "name": "Confirm Appointment",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/{{appointment_id}}/confirm",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "{{appointment_id}}",
                    "confirm"
                  ]
                },
                "description": "Confirm a scheduled appointment\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Business Rules:**\n- Only 'scheduled' appointments can be confirmed\n- Cannot confirm cancelled appointments\n- Time slot availability is verified (max 4 confirmed per slot)\n\n**Status Flow:** scheduled ‚Üí confirmed\n\n**Use Cases:**\n- Patient confirmation calls\n- Staff confirmation process\n- Automated confirmation systems\n\n**Expected Response:** 200 OK with updated appointment"
              },
              "response": []
            },
            {
              "name": "Cancel Appointment",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"Patient requested cancellation\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments/{{appointment_id}}/cancel",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "{{appointment_id}}",
                    "cancel"
                  ]
                },
                "description": "Cancel an appointment\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Optional Body:**\n- `reason`: Reason for cancellation (optional)\n\n**Business Rules:**\n- Can cancel both 'scheduled' and 'confirmed' appointments\n- Cannot cancel already cancelled appointments\n- Frees up the time slot for other appointments\n\n**Status Flow:** scheduled/confirmed ‚Üí cancelled\n\n**Use Cases:**\n- Patient cancellations\n- Emergency rescheduling\n- Doctor unavailability\n\n**Expected Response:** 200 OK with updated appointment"
              },
              "response": []
            },
            {
              "name": "Reschedule Appointment",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"appointmentDate\": \"{{new_date}}\",\n  \"appointmentTime\": \"16:00\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments/{{appointment_id}}/reschedule",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "{{appointment_id}}",
                    "reschedule"
                  ]
                },
                "description": "Reschedule an appointment to a new date and time\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Required Body:**\n- `appointmentDate`: New appointment date (YYYY-MM-DD format)\n- `appointmentTime`: New appointment time (HH:MM format)\n\n**Business Rules:**\n- Cannot reschedule to past dates\n- New time slot availability is verified\n- Original time slot is freed up\n- Status returns to 'scheduled'\n\n**Status Flow:** any ‚Üí scheduled (with new date/time)\n\n**Use Cases:**\n- Patient schedule conflicts\n- Doctor availability changes\n- Emergency rescheduling\n\n**Expected Response:** 200 OK with updated appointment"
              },
              "response": []
            }
          ],
          "description": "Appointment status management operations"
        },
        {
          "name": "üîç Query Operations",
          "item": [
            {
              "name": "Get Appointments by Patient",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/patient/{{patient_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "patient",
                    "{{patient_id}}"
                  ]
                },
                "description": "Get all appointments for a specific patient\n\n**Path Parameters:**\n- `patient_id`: The unique identifier of the patient\n\n**Response:** Array of appointments ordered by date (most recent first)\n\n**Use Cases:**\n- Patient history review\n- Medical record systems\n- Patient portals\n- Appointment history displays"
              },
              "response": []
            },
            {
              "name": "Get Today's Appointments",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/today",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "today"
                  ]
                },
                "description": "Get all appointments scheduled for today\n\n**Response:** Array of today's appointments ordered by time\n\n**Includes all statuses:** scheduled, confirmed, cancelled\n\n**Use Cases:**\n- Daily appointment dashboard\n- Reception desk displays\n- Daily planning and scheduling\n- Staff coordination"
              },
              "response": []
            },
            {
              "name": "Get Today's Confirmed Appointments",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/today/confirmed",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "today",
                    "confirmed"
                  ]
                },
                "description": "Get only confirmed appointments for today\n\n**Response:** Array of confirmed appointments for today ordered by time\n\n**Status Filter:** Only 'confirmed' appointments\n\n**Use Cases:**\n- Doctor's daily schedule\n- Confirmed patient list\n- Resource planning\n- Final daily schedule confirmation"
              },
              "response": []
            },
            {
              "name": "Get All Confirmed Appointments",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/confirmed",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "confirmed"
                  ]
                },
                "description": "Get all confirmed appointments in the system\n\n**Response:** Array of all confirmed appointments\n\n**Status Filter:** Only 'confirmed' appointments\n\n**Use Cases:**\n- Confirmed appointments overview\n- Revenue planning\n- Doctor workload analysis\n- Confirmed appointment statistics"
              },
              "response": []
            },
            {
              "name": "Get Appointments by Date",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/date/{{target_date}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "date",
                    "{{target_date}}"
                  ]
                },
                "description": "Get appointments for a specific date\n\n**Path Parameters:**\n- `target_date`: Date in YYYY-MM-DD format\n\n**Response:** Array of appointments for the specified date\n\n**Use Cases:**\n- Date-specific appointment views\n- Calendar integration\n- Historical appointment data\n- Daily schedule planning"
              },
              "response": []
            },
            {
              "name": "Get Appointments by Date Range",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/date-range?startDate={{start_date}}&endDate={{end_date}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "date-range"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{start_date}}",
                      "description": "Start date in YYYY-MM-DD format"
                    },
                    {
                      "key": "endDate",
                      "value": "{{end_date}}",
                      "description": "End date in YYYY-MM-DD format"
                    }
                  ]
                },
                "description": "Get appointments within a specific date range\n\n**Query Parameters:**\n- `startDate`: Start date in YYYY-MM-DD format\n- `endDate`: End date in YYYY-MM-DD format\n\n**Response:** Array of appointments within the date range\n\n**Use Cases:**\n- Weekly/monthly appointment views\n- Reporting and analytics\n- Calendar range displays\n- Appointment trend analysis"
              },
              "response": []
            }
          ],
          "description": "Query operations for finding specific appointments"
        },
        {
          "name": "üìä Statistics & Reports",
          "item": [
            {
              "name": "Get Appointment Statistics",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/stats",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "stats"
                  ]
                },
                "description": "Get comprehensive appointment statistics\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"total\": 150,\n    \"scheduled\": 45,\n    \"confirmed\": 85,\n    \"cancelled\": 20,\n    \"today\": 12,\n    \"todayConfirmed\": 8,\n    \"thisWeek\": 35,\n    \"thisMonth\": 120,\n    \"upcomingConfirmed\": 25\n  }\n}\n```\n\n**Use Cases:**\n- Dashboard statistics\n- Performance metrics\n- Business intelligence\n- Management reporting"
              },
              "response": []
            },
            {
              "name": "Get Weekly Appointment Summary",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/stats/weekly",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "stats",
                    "weekly"
                  ]
                },
                "description": "Get weekly appointment summary for the last 7 days\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"date\": \"2025-08-01\",\n      \"count\": 8,\n      \"confirmed\": 6,\n      \"scheduled\": 2,\n      \"cancelled\": 0\n    },\n    {\n      \"date\": \"2025-08-02\",\n      \"count\": 12,\n      \"confirmed\": 10,\n      \"scheduled\": 2,\n      \"cancelled\": 0\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Weekly performance charts\n- Trend analysis\n- Capacity planning\n- Weekly reports"
              },
              "response": []
            }
          ],
          "description": "Statistical data and reporting endpoints"
        },
        {
          "name": "üß™ Test Scenarios",
          "item": [
            {
              "name": "Test - Create Valid Appointment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": \"{{sample_patient_id}}\",\n  \"reasonForVisit\": \"Test appointment\",\n  \"appointmentDate\": \"{{tomorrow_date}}\",\n  \"appointmentTime\": \"10:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "Test creating a valid appointment\n\n**Expected:** 201 Created with appointment details\n\n**Test Validations:**\n- Valid patient ID (foreign key to User entity)\n- Valid doctor ID (foreign key to Doctor entity)\n- Future date\n- Valid time format\n- All required fields present"
              },
              "response": []
            },
            {
              "name": "Test - Create Past Date Appointment (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": \"{{sample_patient_id}}\",\n  \"reasonForVisit\": \"Test past appointment\",\n  \"appointmentDate\": \"2025-01-01\",\n  \"appointmentTime\": \"10:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "Test creating appointment with past date\n\n**Expected:** 400 Bad Request with validation error\n\n**Error:** 'Cannot create appointment for past date'"
              },
              "response": []
            },
            {
              "name": "Test - Create Duplicate Patient Date (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": \"{{sample_patient_id}}\",\n  \"reasonForVisit\": \"Duplicate test\",\n  \"appointmentDate\": \"{{tomorrow_date}}\",\n  \"appointmentTime\": \"11:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "Test creating second appointment for same patient on same date\n\n**Prerequisite:** Run after 'Test - Create Valid Appointment'\n\n**Expected:** 409 Conflict\n\n**Error:** 'Patient already has an appointment on this date'"
              },
              "response": []
            },
            {
              "name": "Test - Invalid Patient ID (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": \"99999999-9999-9999-9999-999999999999\",\n  \"reasonForVisit\": \"Test invalid patient\",\n  \"appointmentDate\": \"{{tomorrow_date}}\",\n  \"appointmentTime\": \"12:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "Test creating appointment with non-existent patient ID\n\n**Expected:** 400 Bad Request\n\n**Error:** 'Patient does not exist in the database'"
              },
              "response": []
            },
            {
              "name": "Test - Time Slot Capacity (4 Appointments)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": \"880e8400-e29b-41d4-a716-446655440008\",\n  \"reasonForVisit\": \"Time slot capacity test\",\n  \"appointmentDate\": \"{{day_after_tomorrow}}\",\n  \"appointmentTime\": \"14:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "Test time slot capacity limits\n\n**Instructions:**\n1. Run this request 4 times with different patient UUIDs\n2. The 5th attempt should fail with time slot full error\n\n**Expected (1st-4th):** 201 Created\n**Expected (5th):** 409 Conflict - 'Time slot is already booked'"
              },
              "response": []
            },
            {
              "name": "Test - Confirm Non-existent Appointment (Should Fail)",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/non-existent-id/confirm",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "non-existent-id",
                    "confirm"
                  ]
                },
                "description": "Test confirming non-existent appointment\n\n**Expected:** 404 Not Found\n\n**Error:** 'Appointment not found'"
              },
              "response": []
            }
          ],
          "description": "Test scenarios for validation and error handling"
        },
        {
          "name": "üîÑ Workflow Examples",
          "item": [
            {
              "name": "Workflow - Complete Appointment Lifecycle",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments"
                  ]
                },
                "description": "**Complete Appointment Lifecycle Demo**\n\n**Step 1:** Create appointment (status: 'scheduled')\n- `POST /api/appointments`\n\n**Step 2:** Confirm appointment (status: 'confirmed')\n- `PUT /api/appointments/{id}/confirm`\n\n**Step 3:** Reschedule if needed (status: 'scheduled')\n- `PUT /api/appointments/{id}/reschedule`\n\n**Step 4:** Re-confirm after reschedule (status: 'confirmed')\n- `PUT /api/appointments/{id}/confirm`\n\n**Alternative Step 4:** Cancel if needed (status: 'cancelled') \n- `PUT /api/appointments/{id}/cancel`\n\n**Verification Steps:**\n- `GET /api/appointments/{id}` - Check appointment details\n- `GET /api/appointments/patient/{patientId}` - Patient history\n- `GET /api/appointments/today` - Today's appointments\n\n**Result:** Full appointment management workflow"
              },
              "response": []
            },
            {
              "name": "Workflow - Daily Appointment Management",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/appointments/today",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "appointments",
                    "today"
                  ]
                },
                "description": "**Daily Appointment Management Workflow**\n\n**Morning Setup:**\n1. `GET /api/appointments/today` - Get all today's appointments\n2. `GET /api/appointments/today/confirmed` - Get confirmed only\n3. `GET /api/appointments/stats` - Check overall statistics\n\n**During the Day:**\n4. `PUT /api/appointments/{id}/confirm` - Confirm arriving patients\n5. `PUT /api/appointments/{id}/cancel` - Handle cancellations\n6. `PUT /api/appointments/{id}/reschedule` - Reschedule as needed\n7. `POST /api/appointments` - Create walk-in appointments\n\n**End of Day:**\n8. `GET /api/appointments/stats/weekly` - Weekly summary\n9. `GET /api/appointments/date/{{tomorrow_date}}` - Tomorrow's schedule\n\n**Result:** Complete daily workflow for clinic staff"
              },
              "response": []
            }
          ],
          "description": "Complete workflow examples for common use cases"
        }
      ]
    },
    {
      "name": "üß™ Laboratory Management API",
      "description": "Laboratory management endpoints for healthcare clinic\n\n## Laboratory Management Architecture\nThe API manages laboratory requests and blood chemistry results with comprehensive business logic:\n\n**Laboratory Request Information:**\n- `id`: Unique lab request identifier\n- `patient`: Patient information object\n  - `id`: Patient identifier (string)\n  - `name`: Full patient name\n  - `ageGender`: Combined age and gender (e.g., '25 M', '30 F')\n- `requestDate`: Date of lab request in ISO format\n- `status`: Request status ('pending', 'complete', 'cancelled')\n- `dateTaken`: Date when samples were taken (optional)\n- `others`: Additional notes/remarks\n- `selectedTests`: Array of selected test names\n- `createdAt`: Creation timestamp\n- `updatedAt`: Last update timestamp\n\n**Available Laboratory Tests:**\n\n**Basic Tests:**\n- CBC with Platelet Count\n- Pregnancy Test\n- Urinalysis\n- Fecalysis\n- Occult Blood Test\n\n**Hepatitis Tests:**\n- Hepatitis B Screening\n- Hepatitis A Screening\n- Hepatitis Profile\n\n**STD Tests:**\n- VDRL/RPR (Syphilis screening)\n\n**Other Tests:**\n- Dengue NS1\n- CA 125 / CEA / PSA (Cancer markers)\n\n**Blood Chemistry Tests:**\n- FBS (Fasting Blood Sugar)\n- BUN (Blood Urea Nitrogen)\n- Creatinine\n- Blood Uric Acid\n- Lipid Profile\n- SGOT/SGPT (Liver enzymes)\n- ALP (Alkaline Phosphatase)\n- Sodium (Na)\n- Potassium (K+)\n- HBA1C (Glycated Hemoglobin)\n\n**Thyroid Function Tests:**\n- T3, T4, FT3, FT4, TSH\n\n**Other Diagnostic Tests:**\n- ECG (Electrocardiogram)\n\n**Blood Chemistry Results:**\nSeparate entity for detailed blood chemistry with numeric values:\n- `patient`: Patient information object\n  - `name`: Patient name\n  - `age`: Numeric age\n  - `sex`: Gender ('M', 'F', 'Male', 'Female')\n- `dateTaken`: Sample collection date\n- `results`: Object containing all numeric test results\n- `hasAbnormalValues`: Boolean flag for abnormal results\n- `criticalValues`: Array of critical value alerts\n\n**Business Rules Implemented:**\n- **Test Selection**: At least one test must be selected\n- **Status Transitions**: pending ‚Üí complete/cancelled\n- **Date Validation**: Request dates cannot be in future\n- **Results Validation**: Numeric ranges for blood chemistry values\n- **Critical Value Alerts**: Automatic flagging of dangerous values\n\n**Laboratory Status Flow:**\n1. **pending**: Initial status when request is created\n2. **complete**: All tests completed and results available\n3. **cancelled**: Request cancelled before completion\n\n**API Response Structure:**\nAll responses follow consistent format:\n- `success`: Boolean indicating operation success\n- `data`: Response data (lab request/result object or array)\n- `message`: Success/error message for operations\n\n**Query Capabilities:**\n- Get all lab requests\n- Get completed requests only\n- Get requests by patient ID\n- Filter by date range\n- Update test results\n- Create blood chemistry records\n\n**Test Result Formats:**\nThe API accepts various result formats:\n- **Qualitative**: 'Positive', 'Negative', 'Normal', 'Abnormal'\n- **Quantitative**: Numeric values with units\n- **Descriptive**: Free text descriptions\n\n**Critical Value Management:**\nAutomatic detection and alerting for:\n- FBS > 200 mg/dL (critical high glucose)\n- Creatinine > 3.0 mg/dL (kidney function)\n- SGOT/SGPT > 100 U/L (liver function)\n- BUN > 50 mg/dL (kidney function)\n\n**Integration with Other APIs:**\nLaboratory API integrates with:\n- **Patient API**: Validates patient information\n- **Doctor API**: Associates requests with ordering physicians\n- **Appointment API**: Links lab requests to patient visits",
      "item": [
        {
          "name": "üß™ Laboratory Requests",
          "item": [
            {
              "name": "Get All Lab Requests",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests"
                  ]
                },
                "description": "Get all laboratory requests in the system\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"1\",\n      \"patient\": {\n        \"id\": \"PAT001\",\n        \"name\": \"Juan Dela Cruz\",\n        \"ageGender\": \"35 M\"\n      },\n      \"requestDate\": \"2025-08-03T08:00:00.000Z\",\n      \"status\": \"pending\",\n      \"dateTaken\": null,\n      \"others\": \"Routine checkup\",\n      \"selectedTests\": [\"CBC with Platelet\", \"FBS\", \"Lipid Profile\"],\n      \"createdAt\": \"2025-08-03T08:00:00.000Z\",\n      \"updatedAt\": null\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Laboratory dashboard\n- Request management\n- Workload planning\n- Quality control tracking"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": []\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains data array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Completed Lab Requests",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests/completed",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests",
                    "completed"
                  ]
                },
                "description": "Get all completed laboratory requests\n\n**Response Format:**\nSame as 'Get All Lab Requests' but filtered to status='complete'\n\n**Use Cases:**\n- Results ready for pickup\n- Completed work tracking\n- Performance metrics\n- Billing and reporting"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests/completed",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests",
                        "completed"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": []\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains data array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Lab Request by Patient ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests/{{patient_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests",
                    "{{patient_id}}"
                  ]
                },
                "description": "Get the most recent laboratory request for a specific patient\n\n**Path Parameters:**\n- `patient_id`: Patient identifier (string)\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"1\",\n    \"patient_id\": \"PAT001\",\n    \"patient_name\": \"Juan Dela Cruz\",\n    \"age_gender\": \"35 M\",\n    \"request_date\": \"2025-08-03T08:00:00.000Z\",\n    \"status\": \"pending\",\n    \"selected_tests\": [\"CBC with Platelet\", \"FBS\"]\n  }\n}\n```\n\n**Use Cases:**\n- Patient history lookup\n- Follow-up requests\n- Results inquiry\n- Duplicate prevention"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests/PAT001",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests",
                        "PAT001"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": null\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains data property', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": \"PAT001\",\n  \"patientName\": \"Juan Dela Cruz\",\n  \"ageGender\": \"35 M\",\n  \"requestDate\": \"2025-08-03T08:00:00.000Z\",\n  \"others\": \"Routine annual checkup\",\n  \"cbcWithPlatelet\": \"requested\",\n  \"fbs\": \"requested\",\n  \"lipidProfile\": \"requested\",\n  \"urinalysis\": \"requested\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests"
                  ]
                },
                "description": "Create a new laboratory request\n\n**Required Fields:**\n- `patientId`: Patient identifier\n- `patientName`: Full patient name\n- `ageGender`: Age and gender combined\n- `requestDate`: ISO date string\n- At least one test must be specified\n\n**Available Test Fields:**\n- `cbcWithPlatelet`: CBC with Platelet Count\n- `pregnancyTest`: Pregnancy Test\n- `urinalysis`: Urinalysis\n- `fecalysis`: Fecalysis\n- `fbs`: Fasting Blood Sugar\n- `lipidProfile`: Lipid Profile\n- `bun`: Blood Urea Nitrogen\n- `creatinine`: Creatinine\n- `sgot`: SGOT\n- `sgpt`: SGPT\n- `hbalc`: HBA1C\n- `hepaBScreening`: Hepatitis B Screening\n- `hepaAScreening`: Hepatitis A Screening\n- `hepatitisProfile`: Hepatitis Profile\n- `vdrlRpr`: VDRL/RPR\n- `dengueNs1`: Dengue NS1\n- `ca125CeaPsa`: CA 125 / CEA / PSA\n- `t3`: T3\n- `t4`: T4\n- `ft3`: FT3\n- `ft4`: FT4\n- `tsh`: TSH\n- `ecg`: ECG\n\n**Test Field Values:**\n- `\"requested\"`: Test is requested\n- `\"no\"` or empty: Test not requested"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patientId\": \"PAT001\",\n  \"patientName\": \"Juan Dela Cruz\",\n  \"ageGender\": \"35 M\",\n  \"requestDate\": \"2025-08-03T08:00:00.000Z\",\n  \"others\": \"Routine annual checkup\",\n  \"cbcWithPlatelet\": \"requested\",\n  \"fbs\": \"requested\",\n  \"lipidProfile\": \"requested\",\n  \"urinalysis\": \"requested\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request created successfully\",\n  \"data\": {\n    \"id\": \"1\",\n    \"patient_id\": \"PAT001\",\n    \"patient_name\": \"Juan Dela Cruz\",\n    \"status\": \"pending\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains created lab request', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('patient_id');",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Lab Request Results",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"complete\",\n  \"dateTaken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": \"95 mg/dL - Normal\",\n  \"lipidProfile\": \"Total Cholesterol: 180 mg/dL - Normal\",\n  \"urinalysis\": \"Normal - No abnormal findings\",\n  \"cbcWithPlatelet\": \"WBC: 7,500 cells/uL, RBC: 4.8 M/uL, Platelet: 250,000/uL - Normal\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests/{{patient_id}}/{{request_date}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests",
                    "{{patient_id}}",
                    "{{request_date}}"
                  ]
                },
                "description": "Update laboratory request with test results\n\n**Path Parameters:**\n- `patient_id`: Patient identifier\n- `request_date`: ISO date string of the request\n\n**Update Fields:**\n- `status`: Update status to 'complete' or 'cancelled'\n- `dateTaken`: When samples were collected\n- Test result fields (same names as creation)\n\n**Result Format Guidelines:**\n- **Qualitative**: 'Normal', 'Abnormal', 'Positive', 'Negative'\n- **Quantitative**: Include values and units (e.g., '95 mg/dL')\n- **Reference Ranges**: Include normal ranges when applicable\n- **Descriptive**: Free text for complex results"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"status\": \"complete\",\n  \"dateTaken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": \"95 mg/dL - Normal\",\n  \"lipidProfile\": \"Total Cholesterol: 180 mg/dL - Normal\",\n  \"urinalysis\": \"Normal - No abnormal findings\",\n  \"cbcWithPlatelet\": \"WBC: 7,500 cells/uL, RBC: 4.8 M/uL, Platelet: 250,000/uL - Normal\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests/PAT001/2025-08-03T08:00:00.000Z",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests",
                        "PAT001",
                        "2025-08-03T08:00:00.000Z"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request updated successfully\",\n  \"data\": {\n    \"id\": \"1\",\n    \"status\": \"complete\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains updated lab request', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "ü©∏ Blood Chemistry",
          "item": [
            {
              "name": "Create Blood Chemistry Record",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientName\": \"Maria Santos\",\n  \"age\": 28,\n  \"sex\": \"F\",\n  \"dateTaken\": \"2025-08-03T09:00:00.000Z\",\n  \"fbs\": 92,\n  \"bun\": 15,\n  \"creatinine\": 0.9,\n  \"uricAcid\": 4.2,\n  \"cholesterol\": 185,\n  \"triglycerides\": 120,\n  \"hdl\": 55,\n  \"ldl\": 110,\n  \"sgot\": 25,\n  \"sgpt\": 22,\n  \"sodium\": 140,\n  \"potassium\": 4.0,\n  \"hbalc\": 5.2\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Create a detailed blood chemistry record with numeric values\n\n**Required Fields:**\n- `patientName`: Full patient name\n- `age`: Numeric age\n- `sex`: Gender ('M', 'F', 'Male', 'Female')\n- `dateTaken`: Sample collection date\n- At least one numeric result\n\n**Available Blood Chemistry Tests:**\n- `fbs`: Fasting Blood Sugar (mg/dL)\n- `bun`: Blood Urea Nitrogen (mg/dL)\n- `creatinine`: Creatinine (mg/dL)\n- `uricAcid`: Uric Acid (mg/dL)\n- `cholesterol`: Total Cholesterol (mg/dL)\n- `triglycerides`: Triglycerides (mg/dL)\n- `hdl`: HDL Cholesterol (mg/dL)\n- `ldl`: LDL Cholesterol (mg/dL)\n- `sgot`: SGOT/AST (U/L)\n- `sgpt`: SGPT/ALT (U/L)\n- `sodium`: Sodium (mEq/L)\n- `potassium`: Potassium (mEq/L)\n- `hbalc`: HBA1C (%)\n\n**Response:**\n- Status: 201 Created\n- Returns created record with calculated flags\n- `has_abnormal_values`: Boolean\n- `critical_values`: Array of alerts"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"Maria Santos\",\n  \"age\": 28,\n  \"sex\": \"F\",\n  \"date_taken\": \"2025-08-03T09:00:00.000Z\",\n  \"fbs\": 92,\n  \"bun\": 15,\n  \"creatinine\": 0.9,\n  \"uric_acid\": 4.2,\n  \"cholesterol\": 185,\n  \"triglycerides\": 120,\n  \"hdl\": 55,\n  \"ldl\": 110,\n  \"sgot\": 25,\n  \"sgpt\": 22,\n  \"sodium\": 140,\n  \"potassium\": 4.0,\n  \"hbalc\": 5.2\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Blood chemistry record created successfully\",\n  \"data\": {\n    \"id\": \"1\",\n    \"patient_name\": \"Maria Santos\",\n    \"has_abnormal_values\": false,\n    \"critical_values\": []\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains blood chemistry record', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('patient_name');",
                      "});",
                      "",
                      "pm.test('Response includes analysis flags', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data).to.have.property('has_abnormal_values');",
                      "    pm.expect(jsonData.data).to.have.property('critical_values');",
                      "    pm.expect(jsonData.data.critical_values).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üîç Test Scenarios",
          "item": [
            {
              "name": "Create Lab Request - Basic Tests",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"PAT002\",\n  \"patient_name\": \"Anna Garcia\",\n  \"age_gender\": \"42 F\",\n  \"request_date\": \"2025-08-03T08:30:00.000Z\",\n  \"others\": \"Pre-employment medical\",\n  \"cbc_with_platelet\": \"requested\",\n  \"urinalysis\": \"requested\",\n  \"fecalysis\": \"requested\",\n  \"pregnancy_test\": \"requested\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests"
                  ]
                },
                "description": "Test scenario: Basic laboratory tests for pre-employment medical\n\n**Test Coverage:**\n- Basic health screening tests\n- Female patient with pregnancy test\n- Standard pre-employment package"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"PAT002\",\n  \"patient_name\": \"Anna Garcia\",\n  \"age_gender\": \"42 F\",\n  \"request_date\": \"2025-08-03T08:30:00.000Z\",\n  \"others\": \"Pre-employment medical\",\n  \"cbc_with_platelet\": \"requested\",\n  \"urinalysis\": \"requested\",\n  \"fecalysis\": \"requested\",\n  \"pregnancy_test\": \"requested\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request created successfully\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Basic test request created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Request - Comprehensive Panel",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"PAT003\",\n  \"patient_name\": \"Roberto Martinez\",\n  \"age_gender\": \"55 M\",\n  \"request_date\": \"2025-08-03T09:00:00.000Z\",\n  \"others\": \"Executive health package\",\n  \"cbc_with_platelet\": \"requested\",\n  \"fbs\": \"requested\",\n  \"lipid_profile\": \"requested\",\n  \"bun\": \"requested\",\n  \"creatinine\": \"requested\",\n  \"sgot\": \"requested\",\n  \"sgpt\": \"requested\",\n  \"hbalc\": \"requested\",\n  \"t3\": \"requested\",\n  \"t4\": \"requested\",\n  \"tsh\": \"requested\",\n  \"ecg\": \"requested\",\n  \"hepa_b_screening\": \"requested\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests"
                  ]
                },
                "description": "Test scenario: Comprehensive health screening for executive package\n\n**Test Coverage:**\n- Multiple test categories\n- Cardiovascular screening (lipids, ECG)\n- Diabetes screening (FBS, HBA1C)\n- Liver function (SGOT, SGPT)\n- Kidney function (BUN, Creatinine)\n- Thyroid function (T3, T4, TSH)\n- Infectious disease screening (Hepatitis B)"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"PAT003\",\n  \"patient_name\": \"Roberto Martinez\",\n  \"age_gender\": \"55 M\",\n  \"request_date\": \"2025-08-03T09:00:00.000Z\",\n  \"others\": \"Executive health package\",\n  \"cbc_with_platelet\": \"requested\",\n  \"fbs\": \"requested\",\n  \"lipid_profile\": \"requested\",\n  \"bun\": \"requested\",\n  \"creatinine\": \"requested\",\n  \"sgot\": \"requested\",\n  \"sgpt\": \"requested\",\n  \"hbalc\": \"requested\",\n  \"t3\": \"requested\",\n  \"t4\": \"requested\",\n  \"tsh\": \"requested\",\n  \"ecg\": \"requested\",\n  \"hepa_b_screening\": \"requested\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request created successfully\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Comprehensive test request created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Blood Chemistry - Normal Values",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_name\": \"John Smith\",\n  \"age\": 35,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": 88,\n  \"cholesterol\": 175,\n  \"triglycerides\": 95,\n  \"hdl\": 48,\n  \"ldl\": 105,\n  \"sgot\": 28,\n  \"sgpt\": 32,\n  \"bun\": 14,\n  \"creatinine\": 1.0,\n  \"uric_acid\": 5.2,\n  \"hbalc\": 5.1\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Test scenario: Blood chemistry with normal values\n\n**Expected Results:**\n- `has_abnormal_values`: false\n- `critical_values`: [] (empty array)\n- All values within normal ranges"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"John Smith\",\n  \"age\": 35,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": 88,\n  \"cholesterol\": 175,\n  \"triglycerides\": 95,\n  \"hdl\": 48,\n  \"ldl\": 105,\n  \"sgot\": 28,\n  \"sgpt\": 32,\n  \"bun\": 14,\n  \"creatinine\": 1.0,\n  \"uric_acid\": 5.2,\n  \"hbalc\": 5.1\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"data\": {\n    \"has_abnormal_values\": false,\n    \"critical_values\": []\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Normal values processed correctly', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.has_abnormal_values).to.be.false;",
                      "    pm.expect(jsonData.data.critical_values).to.be.an('array').that.is.empty;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Blood Chemistry - Critical Values",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_name\": \"Emergency Patient\",\n  \"age\": 62,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T11:30:00.000Z\",\n  \"fbs\": 450,\n  \"bun\": 85,\n  \"creatinine\": 4.2,\n  \"sgot\": 285,\n  \"sgpt\": 320,\n  \"sodium\": 125,\n  \"potassium\": 6.8\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Test scenario: Blood chemistry with critical/life-threatening values\n\n**Expected Results:**\n- `has_abnormal_values`: true\n- `critical_values`: Multiple critical alerts\n- Immediate medical attention required\n\n**Critical Values:**\n- FBS: 450 mg/dL (diabetic emergency)\n- BUN: 85 mg/dL (severe kidney dysfunction)\n- Creatinine: 4.2 mg/dL (severe kidney dysfunction)\n- SGOT: 285 U/L (severe liver damage)\n- SGPT: 320 U/L (severe liver damage)\n- Sodium: 125 mEq/L (severe hyponatremia)\n- Potassium: 6.8 mEq/L (dangerous hyperkalemia)"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"Emergency Patient\",\n  \"age\": 62,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T11:30:00.000Z\",\n  \"fbs\": 450,\n  \"bun\": 85,\n  \"creatinine\": 4.2,\n  \"sgot\": 285,\n  \"sgpt\": 320,\n  \"sodium\": 125,\n  \"potassium\": 6.8\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"data\": {\n    \"has_abnormal_values\": true,\n    \"critical_values\": [\n      \"Critically high FBS: 450 mg/dL\",\n      \"Critically high BUN: 85 mg/dL\",\n      \"Critically high Creatinine: 4.2 mg/dL\",\n      \"Critically high SGOT: 285 U/L\",\n      \"Critically high SGPT: 320 U/L\"\n    ]\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Critical values detected correctly', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.has_abnormal_values).to.be.true;",
                      "    pm.expect(jsonData.data.critical_values).to.be.an('array').with.lengthOf.at.least(1);",
                      "});",
                      "",
                      "pm.test('Critical value alerts contain expected messages', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const criticalValues = jsonData.data.critical_values;",
                      "    pm.expect(criticalValues.some(value => value.includes('FBS'))).to.be.true;",
                      "    pm.expect(criticalValues.some(value => value.includes('BUN'))).to.be.true;",
                      "    pm.expect(criticalValues.some(value => value.includes('Creatinine'))).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "‚ùå Error Handling",
          "item": [
            {
              "name": "Create Lab Request - No Tests Selected (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"PAT005\",\n  \"patient_name\": \"Test Patient\",\n  \"age_gender\": \"30 M\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"others\": \"No tests selected\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests"
                  ]
                },
                "description": "Test error handling: Lab request without any tests selected\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Error message: 'At least one laboratory test must be selected'\n\n**Business Rule Validation:**\nThe system should prevent creating lab requests without any tests, as this would be clinically meaningless and waste resources."
              },
              "response": [
                {
                  "name": "Error Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"PAT005\",\n  \"patient_name\": \"Test Patient\",\n  \"age_gender\": \"30 M\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"others\": \"No tests selected\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests"
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "body": "{\n  \"success\": false,\n  \"message\": \"At least one laboratory test must be selected\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error response structure is correct', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('Error message indicates test selection requirement', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('test');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Request - Missing Required Fields (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"\",\n  \"age_gender\": \"25 F\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"cbc_with_platelet\": \"requested\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/lab-requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "lab-requests"
                  ]
                },
                "description": "Test validation errors: Missing required fields\n\n**Missing Fields:**\n- `patient_id`: Empty string\n- `patient_name`: Not provided\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Validation errors for missing fields"
              },
              "response": [
                {
                  "name": "Error Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"\",\n  \"age_gender\": \"25 F\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"cbc_with_platelet\": \"requested\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/lab-requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "lab-requests"
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Patient ID and patient name are required\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error response structure is correct', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('Error message indicates missing required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('required');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Blood Chemistry - Invalid Age (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_name\": \"Test Patient\",\n  \"age\": -5,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:00:00.000Z\",\n  \"fbs\": 95\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Test validation: Invalid age value\n\n**Validation Issues:**\n- `age`: -5 (negative age not allowed)\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Validation error: 'Age must be positive'"
              },
              "response": [
                {
                  "name": "Error Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"Test Patient\",\n  \"age\": -5,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:00:00.000Z\",\n  \"fbs\": 95\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Age must be positive\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error response structure is correct', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('Error message indicates age validation issue', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('age');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "üìç Address API",
      "description": "Philippine address data endpoints for healthcare clinic\n\n## Address API Architecture\nThe API provides hierarchical Philippine address data:\n\n**Province Level:**\n- `code`: Unique province identifier (e.g., 'METRO_MANILA', 'CEBU')\n- `name`: Full province name (e.g., 'Metro Manila', 'Cebu')\n\n**City/Municipality Level:**\n- `code`: Unique city identifier (e.g., 'manila', 'quezon_city')\n- `name`: Full city/municipality name (e.g., 'Manila', 'Quezon City')\n- Filtered by province code\n\n**Barangay Level:**\n- `code`: Unique barangay identifier (e.g., 'B001', 'B002')\n- `name`: Full barangay name (e.g., 'Barangay 1', 'Poblacion')\n- Filtered by city code\n\n**Data Source:**\nAll data is loaded from a comprehensive Philippine address JSON file containing:\n- 17 regions\n- 81 provinces\n- 1,634+ cities/municipalities\n- 42,000+ barangays\n\n**API Response Structure:**\nAll endpoints return consistent response format:\n```json\n{\n  \"success\": true,\n  \"data\": [...],\n  \"message\": \"Optional message\"\n}\n```\n\n**Use Cases:**\n- **Province Selection**: Get all provinces for dropdown/select components\n- **City Selection**: Get cities based on selected province\n- **Barangay Selection**: Get barangays based on selected city\n- **Address Forms**: Build hierarchical address selection forms\n- **Data Validation**: Validate Philippine addresses\n\n**Performance Notes:**\n- Data is loaded once at startup from JSON file\n- In-memory repository provides fast response times\n- No database queries required\n- Suitable for high-frequency address lookups\n\n**Integration with Other APIs:**\nThis Address API is designed to work with Patient and Doctor APIs for complete address information in healthcare records.",
      "item": [
        {
          "name": "Get All Provinces",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/provinces",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "provinces"
              ]
            },
            "description": "Get all provinces in the Philippines\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"code\": \"METRO_MANILA\",\n      \"name\": \"Metro Manila\"\n    },\n    {\n      \"code\": \"CEBU\",\n      \"name\": \"Cebu\"\n    }\n  ]\n}\n```\n\n**Use Case:** Populate province dropdown in address forms"
          },
          "response": []
        },
        {
          "name": "Get Cities - Metro Manila",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/cities/{{metro_manila_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "cities",
                "{{metro_manila_code}}"
              ]
            },
            "description": "Get all cities/municipalities in Metro Manila\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"code\": \"manila\",\n      \"name\": \"Manila\"\n    },\n    {\n      \"code\": \"quezon_city\",\n      \"name\": \"Quezon City\"\n    },\n    {\n      \"code\": \"makati\",\n      \"name\": \"Makati\"\n    }\n  ]\n}\n```\n\n**Use Case:** Populate city dropdown after province selection"
          },
          "response": []
        },
        {
          "name": "Get Cities - Cebu Province",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/cities/{{cebu_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "cities",
                "{{cebu_code}}"
              ]
            },
            "description": "Get all cities/municipalities in Cebu Province\n\n**Expected Cities:** Cebu City, Mandaue, Lapu-Lapu, Talisay, etc."
          },
          "response": []
        },
        {
          "name": "Get Cities - Davao Region",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/cities/{{davao_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "cities",
                "{{davao_code}}"
              ]
            },
            "description": "Get all cities/municipalities in Davao Region"
          },
          "response": []
        },
        {
          "name": "Get Cities - Invalid Province Code (Should Fail)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/cities/INVALID_PROVINCE",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "cities",
                "INVALID_PROVINCE"
              ]
            },
            "description": "Test error handling with invalid province code\n\n**Expected:** Empty array or error response"
          },
          "response": []
        },
        {
          "name": "Get Cities - Empty Province Code (Should Fail)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/cities/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "cities",
                ""
              ]
            },
            "description": "Test validation error with empty province code\n\n**Expected:** 400 Bad Request with validation error"
          },
          "response": []
        },
        {
          "name": "Get Barangays - Manila City",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/barangays/{{manila_city_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "barangays",
                "{{manila_city_code}}"
              ]
            },
            "description": "Get all barangays in Manila City\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"code\": \"B001\",\n      \"name\": \"Barangay 1\"\n    },\n    {\n      \"code\": \"B002\",\n      \"name\": \"Barangay 2\"\n    }\n  ]\n}\n```\n\n**Expected:** 896+ barangays (Manila has many barangays)"
          },
          "response": []
        },
        {
          "name": "Get Barangays - Quezon City",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/barangays/{{quezon_city_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "barangays",
                "{{quezon_city_code}}"
              ]
            },
            "description": "Get all barangays in Quezon City\n\n**Expected:** 142 barangays (Quezon City has exactly 142 barangays)"
          },
          "response": []
        },
        {
          "name": "Get Barangays - Makati City",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/barangays/{{makati_city_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "barangays",
                "{{makati_city_code}}"
              ]
            },
            "description": "Get all barangays in Makati City\n\n**Expected:** 33 barangays (Makati has 33 barangays)"
          },
          "response": []
        },
        {
          "name": "Get Barangays - Cebu City",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/barangays/{{cebu_city_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "barangays",
                "{{cebu_city_code}}"
              ]
            },
            "description": "Get all barangays in Cebu City"
          },
          "response": []
        },
        {
          "name": "Get Barangays - Small Municipality",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/barangays/{{small_municipality_code}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "barangays",
                "{{small_municipality_code}}"
              ]
            },
            "description": "Get barangays from a smaller municipality\n\n**Expected:** Fewer barangays (rural areas typically have fewer barangays)"
          },
          "response": []
        },
        {
          "name": "Get Barangays - Invalid City Code (Should Fail)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/barangays/INVALID_CITY",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "barangays",
                "INVALID_CITY"
              ]
            },
            "description": "Test error handling with invalid city code\n\n**Expected:** Empty array or error response"
          },
          "response": []
        },
        {
          "name": "Get Barangays - Empty City Code (Should Fail)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/barangays/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "barangays",
                ""
              ]
            },
            "description": "Test validation error with empty city code\n\n**Expected:** 400 Bad Request with validation error"
          },
          "response": []
        },
        {
          "name": "Complete Address Flow - Metro Manila",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/provinces",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "provinces"
              ]
            },
            "description": "**Complete Address Selection Flow Demo**\n\n**Step 1:** Get all provinces (this request)\n**Step 2:** User selects 'Metro Manila' ‚Üí Get cities with province code\n**Step 3:** User selects 'Manila' ‚Üí Get barangays with city code\n**Step 4:** User selects specific barangay\n\n**Typical Flow:**\n1. `GET /api/address/provinces`\n2. `GET /api/address/cities/METRO_MANILA`\n3. `GET /api/address/barangays/manila`\n\n**Result:** Complete hierarchical address selection"
          },
          "response": []
        },
        {
          "name": "Performance Test - Multiple Requests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/address/provinces",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "address",
                "provinces"
              ]
            },
            "description": "**Performance Test Request**\n\nSince data is loaded in-memory, all requests should be very fast.\nUse this to test response times for:\n\n- Province loading (81 provinces)\n- City loading (varies by province)\n- Barangay loading (varies significantly by city)\n\n**Expected Performance:**\n- Provinces: < 10ms\n- Cities: < 10ms\n- Barangays: < 50ms (larger datasets)\n\n**Note:** Run this multiple times to test consistency"
          },
          "response": []
        }
      ]
    },
    {
      "name": "‚úÖ Todo Management API",
      "description": "Complete todo CRUD operations with filtering, statistics, and comprehensive validation",
      "item": [
        {
          "name": "Create Todo - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created todo has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title', 'Complete clinic management system documentation');",
                  "    pm.expect(todo).to.have.property('completed', false);",
                  "    pm.expect(todo).to.have.property('priority', 'high');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Todo ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.id).to.be.a('string');",
                  "    pm.expect(todo.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('todoId', todo.id);",
                  "});",
                  "",
                  "pm.test('Timestamps are valid ISO strings', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "    pm.expect(todo.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete clinic management system documentation\",\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos"
              ]
            },
            "description": "Create a new todo with required fields"
          }
        },
        {
          "name": "Get All Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Todo items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const todo = responseJson.data[0];",
                  "        pm.expect(todo).to.have.property('id');",
                  "        pm.expect(todo).to.have.property('title');",
                  "        pm.expect(todo).to.have.property('completed');",
                  "        pm.expect(todo).to.have.property('priority');",
                  "        pm.expect(todo).to.have.property('createdAt');",
                  "        pm.expect(todo).to.have.property('updatedAt');",
                  "        pm.expect(todo.completed).to.be.a('boolean');",
                  "        pm.expect(todo.priority).to.be.oneOf(['low', 'medium', 'high']);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos"
              ]
            },
            "description": "Retrieve all todos regardless of completion status"
          }
        },
        {
          "name": "Get Todo by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Todo has complete information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title');",
                  "    pm.expect(todo).to.have.property('completed');",
                  "    pm.expect(todo).to.have.property('priority');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}"
              ]
            },
            "description": "Retrieve a specific todo by its ID"
          }
        },
        {
          "name": "Get Active Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All todos are active (not completed)', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(function(todo) {",
                  "        pm.expect(todo.completed).to.be.false;",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/active",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "active"
              ]
            },
            "description": "Retrieve only active (not completed) todos"
          }
        },
        {
          "name": "Get Todo Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats).to.have.property('active');",
                  "    pm.expect(stats).to.have.property('completed');",
                  "    pm.expect(stats).to.have.property('overdue');",
                  "    pm.expect(stats).to.have.property('highPriority');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.active).to.be.a('number');",
                  "    pm.expect(stats.completed).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Statistics are mathematically consistent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats.total).to.equal(stats.active + stats.completed);",
                  "    pm.expect(stats.active).to.be.at.least(0);",
                  "    pm.expect(stats.completed).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "stats"
              ]
            },
            "description": "Get statistics about todos including total, active, completed, overdue, and high priority counts"
          }
        },
        {
          "name": "Update Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo updated successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated clinic management documentation\",\n  \"priority\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}"
              ]
            },
            "description": "Update a todo with new values"
          }
        },
        {
          "name": "Toggle Todo Completion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo toggled successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}/toggle",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}",
                "toggle"
              ]
            },
            "description": "Toggle the completion status of a todo"
          }
        },
        {
          "name": "Delete Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo deleted successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}"
              ]
            },
            "description": "Delete a todo by its ID"
          }
        },
        {
          "name": "Create Todo - Missing Title (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "});",
                  "",
                  "pm.test('Error indicates title is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.include('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos"
              ]
            },
            "description": "Test validation error when title is missing"
          }
        }
      ]
    },
    {
      "name": "‚ùå Error Handling & Edge Cases",
      "description": "Various error scenarios and edge cases for comprehensive testing",
      "item": [
        {
          "name": "Unknown Route - 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/unknown-route",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "unknown-route"
              ]
            },
            "description": "Test 404 error for unknown routes"
          }
        },
        {
          "name": "Invalid JSON - 400",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"title\": \"test\", invalid json }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos"
              ]
            },
            "description": "Test error handling for invalid JSON in request body"
          }
        }
      ]
    }
  ]
}