{
  "info": {
    "_postman_id": "cms-laboratory-api-collection",
    "name": "CMS - Laboratory Management API",
    "description": "Laboratory Management API collection for the Clinic Management System with Clean Architecture.\n\n## üß™ Laboratory Management API (/api/laboratory)\n\n**‚≠ê MAJOR UPDATE: Comprehensive Lab Test Results System**\n\nThis collection has been enhanced to support the complete laboratory test result ecosystem with all 7 test categories:\n\n### **üéØ Unified Lab Test Results Endpoint**\n**POST /api/laboratory/test-results** - The powerful unified endpoint that handles:\n\n1. ‚úÖ **Blood Chemistry** - FBS, Lipid Profile, Liver/Kidney function\n2. ‚úÖ **Urinalysis** - Complete urinalysis with microscopic examination\n3. ‚≠ê **Hematology** - CBC with differential and platelet count\n4. ‚≠ê **Fecalysis** - Stool analysis and parasite examination\n5. ‚≠ê **Serology** - Dengue tests (IgG/IgM/NS1) & Thyroid function (T3/T4/TSH)\n6. ‚≠ê **ECG** - Electrocardiogram with professional interpretation\n7. ‚≠ê **Coagulation** - PT/PTT/INR for bleeding assessment\n\n### **ü¶ü Dengue Testing Now Supported!**\nThe exact dengue test payload from implementation is now fully functional:\n```json\n{\n  \"labRequestId\": \"32967a6c16a14457a8f7183b364cff12\",\n  \"dateTested\": \"2025-08-20T13:23:36.000Z\",\n  \"serology\": {\n    \"dengueIgg\": \"Positive\",\n    \"dengueIgm\": \"Negative\",\n    \"dengueNs1\": \"Negative\"\n  },\n  \"remarks\": \"Within normal range\"\n}\n```\n\n### **Core Laboratory Features:**\n- **Laboratory Request Management**: Create, read, update, and delete lab requests\n- **Comprehensive Results Entry**: Support for all 7 major test categories\n- **Automatic Patient Linking**: PatientId resolved from lab request automatically\n- **Enhanced Validation**: Comprehensive validation for all test types\n- **Multi-Category Support**: Single API call can handle multiple test types\n- **Critical Value Alerting**: Handle critical laboratory values and notifications\n- **Test Selection Validation**: Ensures results match requested tests\n- **Status Management**: Automatic lab request status updates\n\n## Testing Coverage\n\n- ‚úÖ Laboratory request creation and management\n- ‚úÖ All 7 test result categories (Blood Chemistry, Urinalysis, Hematology, Fecalysis, Serology, ECG, Coagulation)\n- ‚úÖ Dengue test scenarios (IgG, IgM, NS1)\n- ‚úÖ Multi-category test result creation\n- ‚úÖ Comprehensive validation testing\n- ‚úÖ Error handling (missing fields, empty objects, invalid data)\n- ‚úÖ Critical value detection and alerting\n- ‚úÖ Patient-lab request association\n- ‚úÖ Reference range validation\n- ‚úÖ Laboratory reporting and statistics\n\n## Environment Variables\n\nThis collection uses the following environment variables:\n- `cms_local`: http://localhost:4000 (for local development)\n- `cms_prod`: https://capstone-api.up.railway.app (for production)\n- `baseUrl`: Base URL for API endpoints\n- `authToken`: JWT token for authenticated requests\n- Various test data variables for dynamic testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 2,
      "minor": 3,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Base URL for the Clinic Management System API server"
    },
    {
      "key": "base_url",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Alias for baseUrl to support different collection formats"
    },
    {
      "key": "cms_local",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "CMS Local environment base URL"
    },
    {
      "key": "cms_prod",
      "value": "https://capstone-api.up.railway.app",
      "type": "string",
      "description": "CMS Production environment base URL"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login operations"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string",
      "description": "Dynamic user ID for testing"
    },
    {
      "key": "testPatientId",
      "value": "",
      "type": "string",
      "description": "Dynamic patient ID for testing"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID for testing"
    },
    {
      "key": "testDoctorId",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor ID for testing"
    },
    {
      "key": "doctor_profile_id",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor profile ID for testing"
    },
    {
      "key": "appointment_id",
      "value": "",
      "type": "string",
      "description": "Dynamic appointment ID for testing"
    },
    {
      "key": "sample_patient_id",
      "value": "1",
      "type": "string",
      "description": "Sample patient ID for appointment testing"
    },
    {
      "key": "sample_doctor_id",
      "value": "1",
      "type": "string",
      "description": "Sample doctor ID for appointment testing"
    },
    {
      "key": "future_date",
      "value": "2025-08-10",
      "type": "string",
      "description": "Future date for appointment testing"
    },
    {
      "key": "updated_date",
      "value": "2025-08-11",
      "type": "string",
      "description": "Updated date for appointment testing"
    },
    {
      "key": "updated_doctor_id",
      "value": "2",
      "type": "string",
      "description": "Updated doctor ID for appointment testing"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Dynamic test email for registration tests"
    },
    {
      "key": "loginTestEmail",
      "value": "test.admin@clinic.com",
      "type": "string",
      "description": "Fixed email for login testing"
    },
    {
      "key": "loginTestPassword",
      "value": "AdminPass123",
      "type": "string",
      "description": "Fixed password for login testing"
    },
    {
      "key": "doctorTestEmail",
      "value": "doctor.test@clinic.com",
      "type": "string",
      "description": "Fixed email for doctor role testing"
    },
    {
      "key": "doctorTestPassword",
      "value": "DoctorPass123",
      "type": "string",
      "description": "Fixed password for doctor role testing"
    },
    {
      "key": "receptionistTestEmail",
      "value": "receptionist.test@clinic.com",
      "type": "string",
      "description": "Fixed email for receptionist role testing"
    },
    {
      "key": "receptionistTestPassword",
      "value": "ReceptionistPass123",
      "type": "string",
      "description": "Fixed password for receptionist role testing"
    },
    {
      "key": "metro_manila_code",
      "value": "METRO_MANILA",
      "type": "string",
      "description": "Metro Manila province code for address testing"
    },
    {
      "key": "cebu_code",
      "value": "CEBU",
      "type": "string",
      "description": "Cebu province code for address testing"
    },
    {
      "key": "davao_code",
      "value": "DAVAO_REGION",
      "type": "string",
      "description": "Davao region code for address testing"
    }
  ],
  "item": [
    {
      "name": "üß™ Laboratory Management API",
      "description": "Laboratory management endpoints for healthcare clinic\n\n## Laboratory Management Architecture\nThe API manages laboratory requests and blood chemistry results with comprehensive business logic:\n\n**Laboratory Request Information:**\n- `id`: Unique lab request identifier\n- `patient`: Patient information object\n  - `id`: Patient identifier (string)\n  - `name`: Full patient name\n  - `ageGender`: Combined age and gender (e.g., '25 M', '30 F')\n- `requestDate`: Date of lab request in ISO format\n- `status`: Request status ('pending', 'complete', 'cancelled')\n- `dateTaken`: Date when samples were taken (optional)\n- `others`: Additional notes/remarks\n- `selectedTests`: Array of selected test names\n- `createdAt`: Creation timestamp\n- `updatedAt`: Last update timestamp\n\n**Available Laboratory Tests:**\n\n**Basic Tests:**\n- CBC with Platelet Count\n- Pregnancy Test\n- Urinalysis\n- Fecalysis\n- Occult Blood Test\n\n**Hepatitis Tests:**\n- Hepatitis B Screening\n- Hepatitis A Screening\n- Hepatitis Profile\n\n**STD Tests:**\n- VDRL/RPR (Syphilis screening)\n\n**Other Tests:**\n- Dengue NS1\n- CA 125 / CEA / PSA (Cancer markers)\n\n**Blood Chemistry Tests:**\n- FBS (Fasting Blood Sugar)\n- BUN (Blood Urea Nitrogen)\n- Creatinine\n- Blood Uric Acid\n- Lipid Profile\n- SGOT/SGPT (Liver enzymes)\n- ALP (Alkaline Phosphatase)\n- Sodium (Na)\n- Potassium (K+)\n- HBA1C (Glycated Hemoglobin)\n\n**Thyroid Function Tests:**\n- T3, T4, FT3, FT4, TSH\n\n**Other Diagnostic Tests:**\n- ECG (Electrocardiogram)\n\n**Blood Chemistry Results:**\nSeparate entity for detailed blood chemistry with numeric values:\n- `patient`: Patient information object\n  - `name`: Patient name\n  - `age`: Numeric age\n  - `sex`: Gender ('M', 'F', 'Male', 'Female')\n- `dateTaken`: Sample collection date\n- `results`: Object containing all numeric test results\n- `hasAbnormalValues`: Boolean flag for abnormal results\n- `criticalValues`: Array of critical value alerts\n\n**Business Rules Implemented:**\n- **Test Selection**: At least one test must be selected\n- **Status Transitions**: pending ‚Üí complete/cancelled\n- **Date Validation**: Request dates cannot be in future\n- **Results Validation**: Numeric ranges for blood chemistry values\n- **Critical Value Alerts**: Automatic flagging of dangerous values\n\n**Laboratory Status Flow:**\n1. **pending**: Initial status when request is created\n2. **complete**: All tests completed and results available\n3. **cancelled**: Request cancelled before completion\n\n**API Response Structure:**\nAll responses follow consistent format:\n- `success`: Boolean indicating operation success\n- `data`: Response data (lab request/result object or array)\n- `message`: Success/error message for operations\n\n**Query Capabilities:**\n- Get all lab requests\n- Get completed requests only\n- Get requests by patient ID\n- Filter by date range\n- Update test results\n- Create blood chemistry records\n\n**Test Result Formats:**\nThe API accepts various result formats:\n- **Qualitative**: 'Positive', 'Negative', 'Normal', 'Abnormal'\n- **Quantitative**: Numeric values with units\n- **Descriptive**: Free text descriptions\n\n**Critical Value Management:**\nAutomatic detection and alerting for:\n- FBS > 200 mg/dL (critical high glucose)\n- Creatinine > 3.0 mg/dL (kidney function)\n- SGOT/SGPT > 100 U/L (liver function)\n- BUN > 50 mg/dL (kidney function)\n\n**Integration with Other APIs:**\nLaboratory API integrates with:\n- **Patient API**: Validates patient information\n- **Doctor API**: Associates requests with ordering physicians\n- **Appointment API**: Links lab requests to patient visits",
      "item": [
        {
          "name": "üß™ Laboratory Requests",
          "item": [
            {
              "name": "Get All Lab Requests",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests"
                  ]
                },
                "description": "Get all laboratory requests in the system\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"1\",\n      \"patient\": {\n        \"id\": \"PAT001\",\n        \"name\": \"Juan Dela Cruz\",\n        \"ageGender\": \"35 M\"\n      },\n      \"requestDate\": \"2025-08-03T08:00:00.000Z\",\n      \"status\": \"pending\",\n      \"dateTaken\": null,\n      \"others\": \"Routine checkup\",\n      \"selectedTests\": [\"CBC with Platelet\", \"FBS\", \"Lipid Profile\"],\n      \"createdAt\": \"2025-08-03T08:00:00.000Z\",\n      \"updatedAt\": null\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Laboratory dashboard\n- Request management\n- Workload planning\n- Quality control tracking"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": []\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains data array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Completed Lab Requests",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests/completed",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests",
                    "completed"
                  ]
                },
                "description": "Get all completed laboratory requests\n\n**Response Format:**\nSame as 'Get All Lab Requests' but filtered to status='complete'\n\n**Use Cases:**\n- Results ready for pickup\n- Completed work tracking\n- Performance metrics\n- Billing and reporting"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests/completed",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests",
                        "completed"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": []\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains data array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Lab Request by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests/{{lab_request_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests",
                    "{{lab_request_id}}"
                  ]
                },
                "description": "Get a specific laboratory request by its ID\n\n**Path Parameters:**\n- `lab_request_id`: Laboratory request identifier (string)\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"2a26b746cec9466aba33df5ab722b109\",\n    \"patient\": {\n      \"id\": \"f5768246f4a64410a2a845a4a618f07e\",\n      \"patientNumber\": \"2025-D3\",\n      \"firstName\": \"Andra\",\n      \"lastName\": \"Depanes\",\n      \"name\": \"Andra Depanes\",\n      \"ageGender\": \"Age/Gender\"\n    },\n    \"requestDate\": \"2025-08-23T00:00:00.000Z\",\n    \"status\": \"completed\",\n    \"dateTaken\": \"2025-08-22T00:00:00.000Z\",\n    \"others\": \"ECG examination\",\n    \"selectedTests\": [\"ECG\"],\n    \"createdAt\": \"2025-08-22T17:12:47.000Z\",\n    \"updatedAt\": \"2025-08-22T17:12:53.000Z\"\n  }\n}\n```\n\n**Use Cases:**\n- View specific lab request details\n- Check lab request status\n- Patient inquiry\n- Results retrieval\n- Quality control tracking"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests/2a26b746cec9466aba33df5ab722b109",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests",
                        "2a26b746cec9466aba33df5ab722b109"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"2a26b746cec9466aba33df5ab722b109\",\n    \"patient\": {\n      \"id\": \"f5768246f4a64410a2a845a4a618f07e\",\n      \"patientNumber\": \"2025-D3\",\n      \"firstName\": \"Andra\",\n      \"lastName\": \"Depanes\",\n      \"name\": \"Andra Depanes\",\n      \"ageGender\": \"Age/Gender\"\n    },\n    \"requestDate\": \"2025-08-23T00:00:00.000Z\",\n    \"status\": \"completed\",\n    \"dateTaken\": \"2025-08-22T00:00:00.000Z\",\n    \"others\": \"ECG examination\",\n    \"selectedTests\": [\"ECG\"],\n    \"createdAt\": \"2025-08-22T17:12:47.000Z\",\n    \"updatedAt\": \"2025-08-22T17:12:53.000Z\"\n  }\n}"
                },
                {
                  "name": "Not Found Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests/nonexistent-id",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests",
                        "nonexistent-id"
                      ]
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Laboratory request not found\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains lab request data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('patient');",
                      "});",
                      "",
                      "pm.test('Patient object has required properties', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const patient = jsonData.data.patient;",
                      "    pm.expect(patient).to.have.property('id');",
                      "    pm.expect(patient).to.have.property('patientNumber');",
                      "    pm.expect(patient).to.have.property('firstName');",
                      "    pm.expect(patient).to.have.property('lastName');",
                      "    pm.expect(patient).to.have.property('name');",
                      "    pm.expect(patient).to.have.property('ageGender');",
                      "});",
                      "",
                      "pm.test('Lab request has required properties', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const labRequest = jsonData.data;",
                      "    pm.expect(labRequest).to.have.property('requestDate');",
                      "    pm.expect(labRequest).to.have.property('status');",
                      "    pm.expect(labRequest).to.have.property('selectedTests');",
                      "    pm.expect(labRequest).to.have.property('createdAt');",
                      "    pm.expect(labRequest).to.have.property('updatedAt');",
                      "});",
                      "",
                      "pm.test('selectedTests is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data.selectedTests).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Lab Request by Patient ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests/{{patient_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests",
                    "{{patient_id}}"
                  ]
                },
                "description": "Get the most recent laboratory request for a specific patient\n\n**Path Parameters:**\n- `patient_id`: Patient identifier (string)\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"1\",\n    \"patient_id\": \"PAT001\",\n    \"patient_name\": \"Juan Dela Cruz\",\n    \"age_gender\": \"35 M\",\n    \"request_date\": \"2025-08-03T08:00:00.000Z\",\n    \"status\": \"pending\",\n    \"selected_tests\": [\"CBC with Platelet\", \"FBS\"]\n  }\n}\n```\n\n**Use Cases:**\n- Patient history lookup\n- Follow-up requests\n- Results inquiry\n- Duplicate prevention"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests/PAT001",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests",
                        "PAT001"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": null\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains data property', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientId\": \"PAT001\",\n  \"requestDate\": \"2025-08-03T08:00:00.000Z\",\n  \"routine\": {\n    \"cbcWithPlatelet\": true,\n    \"urinalysis\": true\n  },\n  \"bloodChemistry\": {\n    \"fbs\": true,\n    \"lipidProfile\": true\n  },\n  \"others\": \"Routine annual checkup\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests"
                  ]
                },
                "description": "Create a new laboratory request with grouped test categories\n\n**Required Fields:**\n- `patientId`: Patient identifier\n- `requestDate`: ISO date string\n- At least one test must be set to `true` in any category\n\n**Minimal Example (Blood Chemistry FBS only):**\n```json\n{\n  \"patientId\": \"3c8b4f2e-1a5d-4e6b-9c7a-8f3e2d1c0b9a\",\n  \"requestDate\": \"2025-08-13T00:00:00.000Z\",\n  \"bloodChemistry\": {\n    \"fbs\": true\n  }\n}\n```\n\n**Multiple Tests Example:**\n```json\n{\n  \"patientId\": \"PAT001\",\n  \"requestDate\": \"2025-08-13T00:00:00.000Z\",\n  \"routine\": {\n    \"cbcWithPlatelet\": true,\n    \"urinalysis\": true\n  },\n  \"bloodChemistry\": {\n    \"fbs\": true,\n    \"bun\": true\n  }\n}\n```\n\n**Test Categories:**\n\n**Routine Tests (`routine`):**\n- `cbcWithPlatelet`: CBC with Platelet Count\n- `pregnancyTest`: Pregnancy Test\n- `urinalysis`: Urinalysis\n- `fecalysis`: Fecalysis\n- `occultBloodTest`: Occult Blood Test\n\n**Serology Tests (`serology`):**\n- `hepatitisBScreening`: Hepatitis B Screening\n- `hepatitisAScreening`: Hepatitis A Screening\n- `hepatitisCScreening`: Hepatitis C Screening\n- `hepatitisProfile`: Hepatitis Profile\n- `vdrlRpr`: VDRL/RPR\n- `crp`: C-Reactive Protein\n- `dengueNs1`: Dengue NS1\n- `aso`: Anti-Streptolysin O\n- `crf`: Cardiac Risk Factors\n- `raRf`: RA/RF\n- `tumorMarkers`: Tumor Markers\n- `ca125`: CA 125\n- `cea`: CEA\n- `psa`: PSA\n- `betaHcg`: Beta HCG\n\n**Blood Chemistry Tests (`bloodChemistry`):**\n- `fbs`: Fasting Blood Sugar\n- `bun`: Blood Urea Nitrogen\n- `creatinine`: Creatinine\n- `bloodUricAcid`: Blood Uric Acid\n- `lipidProfile`: Lipid Profile\n- `sgot`: SGOT\n- `sgpt`: SGPT\n- `alkalinePhosphatase`: Alkaline Phosphatase\n- `sodium`: Sodium\n- `potassium`: Potassium\n- `hba1c`: HBA1C\n\n**Miscellaneous Tests (`miscellaneous`):**\n- `ecg`: ECG\n\n**Thyroid Tests (`thyroid`):**\n- `t3`: T3\n- `t4`: T4\n- `ft3`: FT3\n- `ft4`: FT4\n- `tsh`: TSH\n\n**Optional Fields:**\n- `others`: Additional notes or special instructions\n\n**Test Field Values:**\n- `true`: Test is requested\n- `false`: Test not requested\n\n**Notes:**\n- Only include test categories that have selected tests\n- Only include test fields that are set to `true`\n- Empty categories and `false` values should be omitted from the payload\n- This creates a clean, minimal payload structure"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patientId\": \"PAT001\",\n  \"requestDate\": \"2025-08-03T08:00:00.000Z\",\n  \"routine\": {\n    \"cbcWithPlatelet\": true,\n    \"urinalysis\": true\n  },\n  \"bloodChemistry\": {\n    \"fbs\": true,\n    \"lipidProfile\": true\n  },\n  \"others\": \"Routine annual checkup\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request created successfully\",\n  \"data\": {\n    \"id\": \"1\",\n    \"patient_id\": \"PAT001\",\n    \"patient_name\": \"Juan Dela Cruz\",\n    \"status\": \"pending\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains created lab request', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('patient_id');",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Lab Request Results",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"complete\",\n  \"dateTaken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": \"95 mg/dL - Normal\",\n  \"lipidProfile\": \"Total Cholesterol: 180 mg/dL - Normal\",\n  \"urinalysis\": \"Normal - No abnormal findings\",\n  \"cbcWithPlatelet\": \"WBC: 7,500 cells/uL, RBC: 4.8 M/uL, Platelet: 250,000/uL - Normal\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests/{{patient_id}}/{{request_date}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests",
                    "{{patient_id}}",
                    "{{request_date}}"
                  ]
                },
                "description": "Update laboratory request with test results\n\n**Path Parameters:**\n- `patient_id`: Patient identifier\n- `request_date`: ISO date string of the request\n\n**Update Fields:**\n- `status`: Update status to 'complete' or 'cancelled'\n- `dateTaken`: When samples were collected\n- Test result fields (same names as creation)\n\n**Result Format Guidelines:**\n- **Qualitative**: 'Normal', 'Abnormal', 'Positive', 'Negative'\n- **Quantitative**: Include values and units (e.g., '95 mg/dL')\n- **Reference Ranges**: Include normal ranges when applicable\n- **Descriptive**: Free text for complex results"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"status\": \"complete\",\n  \"dateTaken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": \"95 mg/dL - Normal\",\n  \"lipidProfile\": \"Total Cholesterol: 180 mg/dL - Normal\",\n  \"urinalysis\": \"Normal - No abnormal findings\",\n  \"cbcWithPlatelet\": \"WBC: 7,500 cells/uL, RBC: 4.8 M/uL, Platelet: 250,000/uL - Normal\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests/PAT001/2025-08-03T08:00:00.000Z",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests",
                        "PAT001",
                        "2025-08-03T08:00:00.000Z"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request updated successfully\",\n  \"data\": {\n    \"id\": \"1\",\n    \"status\": \"complete\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains updated lab request', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "ü©∏ Blood Chemistry",
          "item": [
            {
              "name": "Create Blood Chemistry Record",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patientName\": \"Maria Santos\",\n  \"age\": 28,\n  \"sex\": \"F\",\n  \"dateTaken\": \"2025-08-03T09:00:00.000Z\",\n  \"fbs\": 92,\n  \"bun\": 15,\n  \"creatinine\": 0.9,\n  \"uricAcid\": 4.2,\n  \"cholesterol\": 185,\n  \"triglycerides\": 120,\n  \"hdl\": 55,\n  \"ldl\": 110,\n  \"sgot\": 25,\n  \"sgpt\": 22,\n  \"sodium\": 140,\n  \"potassium\": 4.0,\n  \"hbalc\": 5.2\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Create a detailed blood chemistry record with numeric values\n\n**Required Fields:**\n- `patientName`: Full patient name\n- `age`: Numeric age\n- `sex`: Gender ('M', 'F', 'Male', 'Female')\n- `dateTaken`: Sample collection date\n- At least one numeric result\n\n**Available Blood Chemistry Tests:**\n- `fbs`: Fasting Blood Sugar (mg/dL)\n- `bun`: Blood Urea Nitrogen (mg/dL)\n- `creatinine`: Creatinine (mg/dL)\n- `uricAcid`: Uric Acid (mg/dL)\n- `cholesterol`: Total Cholesterol (mg/dL)\n- `triglycerides`: Triglycerides (mg/dL)\n- `hdl`: HDL Cholesterol (mg/dL)\n- `ldl`: LDL Cholesterol (mg/dL)\n- `sgot`: SGOT/AST (U/L)\n- `sgpt`: SGPT/ALT (U/L)\n- `sodium`: Sodium (mEq/L)\n- `potassium`: Potassium (mEq/L)\n- `hbalc`: HBA1C (%)\n\n**Response:**\n- Status: 201 Created\n- Returns created record with calculated flags\n- `has_abnormal_values`: Boolean\n- `critical_values`: Array of alerts"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"Maria Santos\",\n  \"age\": 28,\n  \"sex\": \"F\",\n  \"date_taken\": \"2025-08-03T09:00:00.000Z\",\n  \"fbs\": 92,\n  \"bun\": 15,\n  \"creatinine\": 0.9,\n  \"uric_acid\": 4.2,\n  \"cholesterol\": 185,\n  \"triglycerides\": 120,\n  \"hdl\": 55,\n  \"ldl\": 110,\n  \"sgot\": 25,\n  \"sgpt\": 22,\n  \"sodium\": 140,\n  \"potassium\": 4.0,\n  \"hbalc\": 5.2\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Blood chemistry record created successfully\",\n  \"data\": {\n    \"id\": \"1\",\n    \"patient_name\": \"Maria Santos\",\n    \"has_abnormal_values\": false,\n    \"critical_values\": []\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains blood chemistry record', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('patient_name');",
                      "});",
                      "",
                      "pm.test('Response includes analysis flags', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data).to.have.property('has_abnormal_values');",
                      "    pm.expect(jsonData.data).to.have.property('critical_values');",
                      "    pm.expect(jsonData.data.critical_values).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üîç Test Scenarios",
          "item": [
            {
              "name": "Create Lab Request - Basic Tests",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"PAT002\",\n  \"patient_name\": \"Anna Garcia\",\n  \"age_gender\": \"42 F\",\n  \"request_date\": \"2025-08-03T08:30:00.000Z\",\n  \"others\": \"Pre-employment medical\",\n  \"cbc_with_platelet\": \"requested\",\n  \"urinalysis\": \"requested\",\n  \"fecalysis\": \"requested\",\n  \"pregnancy_test\": \"requested\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests"
                  ]
                },
                "description": "Test scenario: Basic laboratory tests for pre-employment medical\n\n**Test Coverage:**\n- Basic health screening tests\n- Female patient with pregnancy test\n- Standard pre-employment package"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"PAT002\",\n  \"patient_name\": \"Anna Garcia\",\n  \"age_gender\": \"42 F\",\n  \"request_date\": \"2025-08-03T08:30:00.000Z\",\n  \"others\": \"Pre-employment medical\",\n  \"cbc_with_platelet\": \"requested\",\n  \"urinalysis\": \"requested\",\n  \"fecalysis\": \"requested\",\n  \"pregnancy_test\": \"requested\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request created successfully\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Basic test request created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Request - Comprehensive Panel",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"PAT003\",\n  \"patient_name\": \"Roberto Martinez\",\n  \"age_gender\": \"55 M\",\n  \"request_date\": \"2025-08-03T09:00:00.000Z\",\n  \"others\": \"Executive health package\",\n  \"cbc_with_platelet\": \"requested\",\n  \"fbs\": \"requested\",\n  \"lipid_profile\": \"requested\",\n  \"bun\": \"requested\",\n  \"creatinine\": \"requested\",\n  \"sgot\": \"requested\",\n  \"sgpt\": \"requested\",\n  \"hbalc\": \"requested\",\n  \"t3\": \"requested\",\n  \"t4\": \"requested\",\n  \"tsh\": \"requested\",\n  \"ecg\": \"requested\",\n  \"hepa_b_screening\": \"requested\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests"
                  ]
                },
                "description": "Test scenario: Comprehensive health screening for executive package\n\n**Test Coverage:**\n- Multiple test categories\n- Cardiovascular screening (lipids, ECG)\n- Diabetes screening (FBS, HBA1C)\n- Liver function (SGOT, SGPT)\n- Kidney function (BUN, Creatinine)\n- Thyroid function (T3, T4, TSH)\n- Infectious disease screening (Hepatitis B)"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"PAT003\",\n  \"patient_name\": \"Roberto Martinez\",\n  \"age_gender\": \"55 M\",\n  \"request_date\": \"2025-08-03T09:00:00.000Z\",\n  \"others\": \"Executive health package\",\n  \"cbc_with_platelet\": \"requested\",\n  \"fbs\": \"requested\",\n  \"lipid_profile\": \"requested\",\n  \"bun\": \"requested\",\n  \"creatinine\": \"requested\",\n  \"sgot\": \"requested\",\n  \"sgpt\": \"requested\",\n  \"hbalc\": \"requested\",\n  \"t3\": \"requested\",\n  \"t4\": \"requested\",\n  \"tsh\": \"requested\",\n  \"ecg\": \"requested\",\n  \"hepa_b_screening\": \"requested\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Laboratory request created successfully\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Comprehensive test request created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Blood Chemistry - Normal Values",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_name\": \"John Smith\",\n  \"age\": 35,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": 88,\n  \"cholesterol\": 175,\n  \"triglycerides\": 95,\n  \"hdl\": 48,\n  \"ldl\": 105,\n  \"sgot\": 28,\n  \"sgpt\": 32,\n  \"bun\": 14,\n  \"creatinine\": 1.0,\n  \"uric_acid\": 5.2,\n  \"hbalc\": 5.1\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Test scenario: Blood chemistry with normal values\n\n**Expected Results:**\n- `has_abnormal_values`: false\n- `critical_values`: [] (empty array)\n- All values within normal ranges"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"John Smith\",\n  \"age\": 35,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:30:00.000Z\",\n  \"fbs\": 88,\n  \"cholesterol\": 175,\n  \"triglycerides\": 95,\n  \"hdl\": 48,\n  \"ldl\": 105,\n  \"sgot\": 28,\n  \"sgpt\": 32,\n  \"bun\": 14,\n  \"creatinine\": 1.0,\n  \"uric_acid\": 5.2,\n  \"hbalc\": 5.1\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"data\": {\n    \"has_abnormal_values\": false,\n    \"critical_values\": []\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Normal values processed correctly', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.has_abnormal_values).to.be.false;",
                      "    pm.expect(jsonData.data.critical_values).to.be.an('array').that.is.empty;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Blood Chemistry - Critical Values",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_name\": \"Emergency Patient\",\n  \"age\": 62,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T11:30:00.000Z\",\n  \"fbs\": 450,\n  \"bun\": 85,\n  \"creatinine\": 4.2,\n  \"sgot\": 285,\n  \"sgpt\": 320,\n  \"sodium\": 125,\n  \"potassium\": 6.8\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Test scenario: Blood chemistry with critical/life-threatening values\n\n**Expected Results:**\n- `has_abnormal_values`: true\n- `critical_values`: Multiple critical alerts\n- Immediate medical attention required\n\n**Critical Values:**\n- FBS: 450 mg/dL (diabetic emergency)\n- BUN: 85 mg/dL (severe kidney dysfunction)\n- Creatinine: 4.2 mg/dL (severe kidney dysfunction)\n- SGOT: 285 U/L (severe liver damage)\n- SGPT: 320 U/L (severe liver damage)\n- Sodium: 125 mEq/L (severe hyponatremia)\n- Potassium: 6.8 mEq/L (dangerous hyperkalemia)"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"Emergency Patient\",\n  \"age\": 62,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T11:30:00.000Z\",\n  \"fbs\": 450,\n  \"bun\": 85,\n  \"creatinine\": 4.2,\n  \"sgot\": 285,\n  \"sgpt\": 320,\n  \"sodium\": 125,\n  \"potassium\": 6.8\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"data\": {\n    \"has_abnormal_values\": true,\n    \"critical_values\": [\n      \"Critically high FBS: 450 mg/dL\",\n      \"Critically high BUN: 85 mg/dL\",\n      \"Critically high Creatinine: 4.2 mg/dL\",\n      \"Critically high SGOT: 285 U/L\",\n      \"Critically high SGPT: 320 U/L\"\n    ]\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Critical values detected correctly', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.has_abnormal_values).to.be.true;",
                      "    pm.expect(jsonData.data.critical_values).to.be.an('array').with.lengthOf.at.least(1);",
                      "});",
                      "",
                      "pm.test('Critical value alerts contain expected messages', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const criticalValues = jsonData.data.critical_values;",
                      "    pm.expect(criticalValues.some(value => value.includes('FBS'))).to.be.true;",
                      "    pm.expect(criticalValues.some(value => value.includes('BUN'))).to.be.true;",
                      "    pm.expect(criticalValues.some(value => value.includes('Creatinine'))).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "‚ùå Error Handling",
          "item": [
            {
              "name": "Create Lab Request - No Tests Selected (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"PAT005\",\n  \"patient_name\": \"Test Patient\",\n  \"age_gender\": \"30 M\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"others\": \"No tests selected\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests"
                  ]
                },
                "description": "Test error handling: Lab request without any tests selected\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Error message: 'At least one laboratory test must be selected'\n\n**Business Rule Validation:**\nThe system should prevent creating lab requests without any tests, as this would be clinically meaningless and waste resources."
              },
              "response": [
                {
                  "name": "Error Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"PAT005\",\n  \"patient_name\": \"Test Patient\",\n  \"age_gender\": \"30 M\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"others\": \"No tests selected\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests"
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "body": "{\n  \"success\": false,\n  \"message\": \"At least one laboratory test must be selected\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error response structure is correct', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('Error message indicates test selection requirement', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('test');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Request - Missing Required Fields (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_id\": \"\",\n  \"age_gender\": \"25 F\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"cbc_with_platelet\": \"requested\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/requests",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "requests"
                  ]
                },
                "description": "Test validation errors: Missing required fields\n\n**Missing Fields:**\n- `patient_id`: Empty string\n- `patient_name`: Not provided\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Validation errors for missing fields"
              },
              "response": [
                {
                  "name": "Error Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_id\": \"\",\n  \"age_gender\": \"25 F\",\n  \"request_date\": \"2025-08-03T08:00:00.000Z\",\n  \"cbc_with_platelet\": \"requested\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/requests",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "requests"
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Patient ID and patient name are required\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error response structure is correct', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('Error message indicates missing required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('required');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Blood Chemistry - Invalid Age (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"patient_name\": \"Test Patient\",\n  \"age\": -5,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:00:00.000Z\",\n  \"fbs\": 95\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "blood-chemistry"
                  ]
                },
                "description": "Test validation: Invalid age value\n\n**Validation Issues:**\n- `age`: -5 (negative age not allowed)\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Validation error: 'Age must be positive'"
              },
              "response": [
                {
                  "name": "Error Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"patient_name\": \"Test Patient\",\n  \"age\": -5,\n  \"sex\": \"M\",\n  \"date_taken\": \"2025-08-03T10:00:00.000Z\",\n  \"fbs\": 95\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/blood-chemistry",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "blood-chemistry"
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Age must be positive\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error response structure is correct', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('Error message indicates age validation issue', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('age');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üß™ Lab Test Results",
          "item": [
            {
              "name": "Create Lab Test Result - Blood Chemistry & Urinalysis",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"labRequestId\": \"d2e66463bb2349209ea2cddf47f7822f\",\n  \"dateTested\": \"2025-08-15T10:30:00.000Z\",\n  \"bloodChemistry\": {\n    \"fbs\": 95.5,\n    \"cholesterol\": 180.2,\n    \"triglycerides\": 110.8,\n    \"hdl\": 52.0,\n    \"ldl\": 108.5,\n    \"bun\": 18.5,\n    \"creatinine\": 1.1,\n    \"uricAcid\": 6.2,\n    \"sgot\": 28.0,\n    \"sgpt\": 35.0\n  },\n  \"urinalysis\": {\n    \"color\": \"Yellow\",\n    \"transparency\": \"Clear\",\n    \"specificGravity\": \"1.020\",\n    \"protein\": \"Negative\",\n    \"glucose\": \"Negative\",\n    \"ketones\": \"Negative\",\n    \"blood\": \"Negative\",\n    \"leukocyteEsterase\": \"Negative\",\n    \"nitrites\": \"Negative\"\n  },\n  \"remarks\": \"All test results within normal ranges\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results"
                  ]
                },
                "description": "üéØ **UNIFIED ENDPOINT - Supports ALL 7 Test Categories**\n\nCreate comprehensive lab test results using the powerful unified endpoint that now supports all laboratory test categories.\n\n**‚≠ê MAJOR ENHANCEMENT:**\n**All 7 Test Categories Now Supported:**\n1. ‚úÖ Blood Chemistry (existing)\n2. ‚úÖ Urinalysis (existing)\n3. ‚≠ê Hematology (NEW - CBC with platelet)\n4. ‚≠ê Fecalysis (NEW - stool analysis)\n5. ‚≠ê Serology (NEW - includes Dengue & Thyroid tests)\n6. ‚≠ê ECG (NEW - electrocardiogram)\n7. ‚≠ê Coagulation (NEW - PT/PTT/INR)\n\n**Key Features:**\n- Single endpoint handles all test result types\n- Automatic patient ID retrieval from lab request\n- Comprehensive validation for all categories\n- Supports partial results (any combination of test types)\n- Enhanced business logic validation\n\n**Required Fields:**\n- `labRequestId`: Existing lab request identifier\n- `dateTested`: Date and time when tests were performed\n- At least one test result category with actual values\n\n**Business Logic:**\n1. Validates lab request exists and is pending\n2. Auto-retrieves patientId from lab request\n3. Validates results match requested tests\n4. Updates lab request status to completed\n\n**Perfect for Testing:**\n- Basic metabolic panels\n- Comprehensive health screenings\n- Routine lab work\n- Specialized testing scenarios"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"labRequestId\": \"d2e66463bb2349209ea2cddf47f7822f\",\n  \"dateTested\": \"2025-08-15T10:30:00.000Z\",\n  \"bloodChemistry\": {\n    \"fbs\": 95.5,\n    \"cholesterol\": 180.2,\n    \"triglycerides\": 110.8\n  },\n  \"urinalysis\": {\n    \"color\": \"Yellow\",\n    \"protein\": \"Negative\"\n  },\n  \"remarks\": \"Normal results\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Lab test result created successfully\",\n  \"data\": {\n    \"id\": \"abc123def456ghi789jkl012mno345pqr\",\n    \"labRequestId\": \"d2e66463bb2349209ea2cddf47f7822f\",\n    \"patientId\": \"f5768246f4a64410a2a845a4a618f07e\",\n    \"dateTested\": \"2025-08-15T10:30:00.000Z\",\n    \"bloodChemistry\": {\n      \"fbs\": 95.5,\n      \"cholesterol\": 180.2,\n      \"triglycerides\": 110.8\n    },\n    \"urinalysis\": {\n      \"color\": \"Yellow\",\n      \"protein\": \"Negative\"\n    },\n    \"status\": \"completed\",\n    \"createdAt\": \"2025-08-15T10:35:00.000Z\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains lab test result data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('labRequestId');",
                      "    pm.expect(jsonData.data).to.have.property('patientId');",
                      "});",
                      "",
                      "pm.test('PatientId is automatically populated from lab request', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data.patientId).to.be.a('string');",
                      "    pm.expect(jsonData.data.patientId).to.not.be.empty;",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.equal('Lab test result created successfully');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Test Result - Serology (Dengue Tests)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"labRequestId\": \"32967a6c16a14457a8f7183b364cff12\",\n  \"dateTested\": \"2025-08-20T13:23:36.000Z\",\n  \"serology\": {\n    \"dengueIgg\": \"Positive\",\n    \"dengueIgm\": \"Negative\",\n    \"dengueNs1\": \"Negative\"\n  },\n  \"remarks\": \"Within normal range\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results"
                  ]
                },
                "description": "ü¶ü **DENGUE TEST PAYLOAD - NOW SUPPORTED!**\n\nCreate Serology test results including Dengue tests. This is the exact payload from your summary that now works perfectly!\n\n**‚≠ê NEW: Serology Support**\n\n**Serology Fields (`serology`):**\n- `dengueIgg`: IgG antibodies (indicates past infection)\n- `dengueIgm`: IgM antibodies (indicates recent infection)\n- `dengueNs1`: NS1 antigen (indicates active infection)\n- `ft3`: Free T3 (numeric - thyroid function)\n- `ft4`: Free T4 (numeric - thyroid function)\n- `tsh`: Thyroid Stimulating Hormone (numeric)\n\n**Clinical Interpretation:**\n- **IgG Positive, IgM Negative**: Past dengue infection (immunity)\n- **IgG Negative, IgM Positive**: Recent/current infection\n- **NS1 Positive**: Active dengue infection\n\n**Supported Test Categories (All 7):**\n1. ‚úÖ Blood Chemistry\n2. ‚úÖ Urinalysis\n3. ‚≠ê Hematology (NEW)\n4. ‚≠ê Fecalysis (NEW)\n5. ‚≠ê Serology (NEW) - includes Dengue & Thyroid\n6. ‚≠ê ECG (NEW)\n7. ‚≠ê Coagulation (NEW)\n\n**Use Cases:**\n- Dengue fever diagnosis\n- Thyroid function assessment\n- Infectious disease screening"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"labRequestId\": \"32967a6c16a14457a8f7183b364cff12\",\n  \"dateTested\": \"2025-08-20T13:23:36.000Z\",\n  \"serology\": {\n    \"dengueIgg\": \"Positive\",\n    \"dengueIgm\": \"Negative\",\n    \"dengueNs1\": \"Negative\"\n  },\n  \"remarks\": \"Within normal range\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Lab test result created successfully\",\n  \"data\": {\n    \"id\": \"serology456789123\",\n    \"labRequestId\": \"32967a6c16a14457a8f7183b364cff12\",\n    \"patientId\": \"dengue567890123456789012345678901\",\n    \"dateTested\": \"2025-08-20T13:23:36.000Z\",\n    \"serology\": {\n      \"dengueIgg\": \"Positive\",\n      \"dengueIgm\": \"Negative\",\n      \"dengueNs1\": \"Negative\"\n    },\n    \"remarks\": \"Within normal range\",\n    \"createdAt\": \"2025-08-20T13:30:00.000Z\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Serology (Dengue) results are included', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data).to.have.property('serology');",
                      "    pm.expect(jsonData.data.serology).to.have.property('dengueIgg');",
                      "    pm.expect(jsonData.data.serology).to.have.property('dengueIgm');",
                      "    pm.expect(jsonData.data.serology).to.have.property('dengueNs1');",
                      "});",
                      "",
                      "pm.test('Dengue test results are valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const serology = jsonData.data.serology;",
                      "    pm.expect(serology.dengueIgg).to.be.oneOf(['Positive', 'Negative']);",
                      "    pm.expect(serology.dengueIgm).to.be.oneOf(['Positive', 'Negative']);",
                      "    pm.expect(serology.dengueNs1).to.be.oneOf(['Positive', 'Negative']);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Test Result - Hematology (CBC)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"labRequestId\": \"a1b2c3d4e5f6789012345678901234ef\",\n  \"dateTested\": \"2025-08-20T09:15:00.000Z\",\n  \"hematology\": {\n    \"hematocrit\": \"42.5\",\n    \"hemoglobin\": \"14.2\",\n    \"rbc\": \"4.8\",\n    \"wbc\": \"7.2\",\n    \"segmenters\": \"65\",\n    \"lymphocyte\": \"28\",\n    \"platelet\": \"250\"\n  },\n  \"remarks\": \"Complete Blood Count within normal limits\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results"
                  ]
                },
                "description": "‚≠ê **NEW: Hematology Support**\n\nCreate Hematology (Complete Blood Count) test results\n\n**Hematology Fields (`hematology`):**\n- `hematocrit`: Packed cell volume (%)\n- `hemoglobin`: Hemoglobin concentration (g/dL)\n- `rbc`: Red blood cell count (√ó10¬π¬≤/L)\n- `wbc`: White blood cell count (√ó10‚Åπ/L)\n- `segmenters`: Neutrophils (%)\n- `lymphocyte`: Lymphocytes (%)\n- `monocyte`: Monocytes (%) \n- `basophils`: Basophils (%)\n- `eosinophils`: Eosinophils (%)\n- `platelet`: Platelet count (√ó10‚Åπ/L)\n- `others`: Additional findings\n\n**Use Cases:**\n- Complete Blood Count (CBC)\n- Infection screening\n- Anemia evaluation\n- Pre-operative screening"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"labRequestId\": \"a1b2c3d4e5f6789012345678901234ef\",\n  \"dateTested\": \"2025-08-20T09:15:00.000Z\",\n  \"hematology\": {\n    \"hemoglobin\": \"14.2\",\n    \"wbc\": \"7.2\",\n    \"platelet\": \"250\"\n  }\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Lab test result created successfully\",\n  \"data\": {\n    \"id\": \"hematology123456789\",\n    \"labRequestId\": \"a1b2c3d4e5f6789012345678901234ef\",\n    \"patientId\": \"pat789012345678901234567890123456\",\n    \"dateTested\": \"2025-08-20T09:15:00.000Z\",\n    \"hematology\": {\n      \"hemoglobin\": \"14.2\",\n      \"wbc\": \"7.2\",\n      \"platelet\": \"250\"\n    },\n    \"createdAt\": \"2025-08-20T09:20:00.000Z\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Hematology results are included', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data).to.have.property('hematology');",
                      "    pm.expect(jsonData.data.hematology).to.have.property('hemoglobin');",
                      "    pm.expect(jsonData.data.hematology).to.have.property('wbc');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Lab Test Result - Multiple Categories",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"labRequestId\": \"multi789012345678901234567890cdef\",\n  \"dateTested\": \"2025-08-20T08:00:00.000Z\",\n  \"bloodChemistry\": {\n    \"fbs\": 110.0,\n    \"bun\": 20.5,\n    \"creatinine\": 1.0\n  },\n  \"urinalysis\": {\n    \"color\": \"Yellow\",\n    \"protein\": \"Negative\",\n    \"glucose\": \"Negative\"\n  },\n  \"hematology\": {\n    \"hemoglobin\": \"13.5\",\n    \"wbc\": \"6.8\",\n    \"platelet\": \"280\"\n  },\n  \"serology\": {\n    \"ft3\": 3.2,\n    \"ft4\": 1.4,\n    \"tsh\": 2.1\n  },\n  \"remarks\": \"Comprehensive panel - all results within normal limits\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results"
                  ]
                },
                "description": "üéØ **MULTI-CATEGORY TESTING**\n\nDemonstrates the comprehensive capabilities of the unified endpoint to handle multiple test types in a single request.\n\n**Included Categories:**\n- ‚úÖ Blood Chemistry (Basic metabolic panel)\n- ‚úÖ Urinalysis (Basic screening)\n- ‚úÖ Hematology (CBC essentials)\n- ‚úÖ Serology (Thyroid function)\n\n**NEW CAPABILITIES:**\n- Single API call for multiple test types\n- Automatic patient ID resolution\n- Comprehensive validation for all 7 categories\n- Supports any combination of test types\n\n**Perfect for:**\n- Annual physical exams\n- Pre-operative workups\n- Comprehensive health screenings\n- Executive health packages"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"labRequestId\": \"multi789012345678901234567890cdef\",\n  \"dateTested\": \"2025-08-20T08:00:00.000Z\",\n  \"bloodChemistry\": {\n    \"fbs\": 110.0\n  },\n  \"hematology\": {\n    \"hemoglobin\": \"13.5\"\n  }\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results"
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Lab test result created successfully\",\n  \"data\": {\n    \"id\": \"multi234567890123456\",\n    \"labRequestId\": \"multi789012345678901234567890cdef\",\n    \"patientId\": \"comprehensive901234567890123456789012\",\n    \"dateTested\": \"2025-08-20T08:00:00.000Z\",\n    \"bloodChemistry\": {\n      \"fbs\": 110.0\n    },\n    \"hematology\": {\n      \"hemoglobin\": \"13.5\"\n    },\n    \"createdAt\": \"2025-08-20T08:10:00.000Z\"\n  }\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Multiple test categories are included', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const data = jsonData.data;",
                      "    pm.expect(data).to.have.property('bloodChemistry');",
                      "    pm.expect(data).to.have.property('hematology');",
                      "});",
                      "",
                      "pm.test('All test categories have valid data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const data = jsonData.data;",
                      "    ",
                      "    if (data.bloodChemistry) {",
                      "        pm.expect(Object.keys(data.bloodChemistry).length).to.be.greaterThan(0);",
                      "    }",
                      "    ",
                      "    if (data.hematology) {",
                      "        pm.expect(Object.keys(data.hematology).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get All Lab Test Results",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results"
                  ]
                },
                "description": "üìã **GET ALL LAB TEST RESULTS**\n\nRetrieve all lab test results from the system.\n\n**Features:**\n- Retrieves all lab test results across all patients\n- Includes all 7 test categories when present\n- Formatted with patient information\n- Sorted by creation date (newest first)\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"result123\",\n      \"labRequestId\": \"request456\",\n      \"patientId\": \"patient789\",\n      \"dateTested\": \"2025-08-23T10:30:00.000Z\",\n      \"bloodChemistry\": { ... },\n      \"urinalysis\": { ... },\n      \"createdAt\": \"2025-08-23T10:35:00.000Z\"\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Lab dashboard overview\n- Quality control reviews\n- Batch result processing\n- Administrative reports"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory", 
                        "test-results"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"abc123def456ghi789jkl012mno345pqr\",\n      \"labRequestId\": \"d2e66463bb2349209ea2cddf47f7822f\",\n      \"patientId\": \"f5768246f4a64410a2a845a4a618f07e\",\n      \"dateTested\": \"2025-08-23T10:30:00.000Z\",\n      \"bloodChemistry\": {\n        \"fbs\": 95.5,\n        \"cholesterol\": 180.2\n      },\n      \"urinalysis\": {\n        \"color\": \"Yellow\",\n        \"protein\": \"Negative\"\n      },\n      \"createdAt\": \"2025-08-23T10:35:00.000Z\"\n    }\n  ]\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test('Response contains array of lab test results', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Each result has required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.data.length > 0) {",
                      "        const result = jsonData.data[0];",
                      "        pm.expect(result).to.have.property('id');",
                      "        pm.expect(result).to.have.property('labRequestId');",
                      "        pm.expect(result).to.have.property('patientId');",
                      "        pm.expect(result).to.have.property('dateTested');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Lab Test Result by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results/{{lab_test_result_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results",
                    "{{lab_test_result_id}}"
                  ]
                },
                "description": "üîç **GET LAB TEST RESULT BY ID**\n\nRetrieve a specific lab test result by its unique identifier.\n\n**Path Parameters:**\n- `id`: Lab test result ID (32-character hex string)\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"abc123def456ghi789jkl012mno345pqr\",\n    \"labRequestId\": \"d2e66463bb2349209ea2cddf47f7822f\",\n    \"patientId\": \"f5768246f4a64410a2a845a4a618f07e\",\n    \"dateTested\": \"2025-08-23T10:30:00.000Z\",\n    \"bloodChemistry\": {\n      \"fbs\": 95.5,\n      \"cholesterol\": 180.2\n    },\n    \"urinalysis\": {\n      \"color\": \"Yellow\",\n      \"protein\": \"Negative\"\n    },\n    \"remarks\": \"All results within normal ranges\",\n    \"createdAt\": \"2025-08-23T10:35:00.000Z\",\n    \"updatedAt\": \"2025-08-23T10:35:00.000Z\"\n  }\n}\n```\n\n**Use Cases:**\n- View detailed test results\n- Patient result inquiry\n- Quality control review\n- Results verification\n- Print/export specific result"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results/abc123def456ghi789jkl012mno345pqr",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results",
                        "abc123def456ghi789jkl012mno345pqr"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"abc123def456ghi789jkl012mno345pqr\",\n    \"labRequestId\": \"d2e66463bb2349209ea2cddf47f7822f\",\n    \"patientId\": \"f5768246f4a64410a2a845a4a618f07e\",\n    \"dateTested\": \"2025-08-23T10:30:00.000Z\",\n    \"bloodChemistry\": {\n      \"fbs\": 95.5,\n      \"cholesterol\": 180.2,\n      \"triglycerides\": 110.8\n    },\n    \"urinalysis\": {\n      \"color\": \"Yellow\",\n      \"protein\": \"Negative\",\n      \"glucose\": \"Negative\"\n    },\n    \"remarks\": \"All results within normal ranges\",\n    \"createdAt\": \"2025-08-23T10:35:00.000Z\",\n    \"updatedAt\": \"2025-08-23T10:35:00.000Z\"\n  }\n}"
                },
                {
                  "name": "Not Found Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results/nonexistent123",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results",
                        "nonexistent123"
                      ]
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Lab test result with ID nonexistent123 not found\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is successful', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "    });",
                      "    ",
                      "    pm.test('Response contains lab test result data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('data');",
                      "        pm.expect(jsonData.data).to.have.property('id');",
                      "        pm.expect(jsonData.data).to.have.property('labRequestId');",
                      "        pm.expect(jsonData.data).to.have.property('patientId');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Error response structure is correct', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.false;",
                      "        pm.expect(jsonData).to.have.property('message');",
                      "    });",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Lab Test Result",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"dateTested\": \"2025-08-23T14:30:00.000Z\",\n  \"bloodChemistry\": {\n    \"fbs\": 98.0,\n    \"cholesterol\": 175.5,\n    \"triglycerides\": 105.2\n  },\n  \"urinalysis\": {\n    \"color\": \"Light Yellow\",\n    \"transparency\": \"Clear\",\n    \"protein\": \"Trace\"\n  },\n  \"remarks\": \"Updated results - minor corrections made\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results/{{lab_test_result_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results",
                    "{{lab_test_result_id}}"
                  ]
                },
                "description": "‚úèÔ∏è **UPDATE LAB TEST RESULT**\n\nUpdate an existing lab test result with new values. Supports partial updates.\n\n**Path Parameters:**\n- `id`: Lab test result ID to update\n\n**Update Features:**\n- ‚úÖ **Partial Updates**: Only provide fields you want to change\n- ‚úÖ **All 7 Categories**: Can update any test category\n- ‚úÖ **Validation**: Ensures data integrity\n- ‚úÖ **Timestamps**: Automatically updates `updatedAt`\n- ‚úÖ **Error Handling**: Proper 404 for non-existent results\n\n**Updatable Fields:**\n- `labRequestId`: Change associated lab request (optional)\n- `dateTested`: Update test date/time\n- `bloodChemistry`: Blood chemistry values\n- `urinalysis`: Urinalysis results\n- `hematology`: CBC results\n- `fecalysis`: Stool analysis\n- `serology`: Serology/immunology tests\n- `ecg`: ECG findings\n- `coagulation`: Coagulation studies\n- `remarks`: Additional notes\n\n**Business Rules:**\n- Original creation timestamp preserved\n- Updated timestamp automatically set\n- Patient ID cannot be changed (derived from lab request)\n- At least one field must be updated\n\n**Perfect for:**\n- Result corrections\n- Adding missing test values\n- Updating remarks/interpretations\n- Correcting transcription errors"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"bloodChemistry\": {\n    \"fbs\": 98.0,\n    \"cholesterol\": 175.5\n  },\n  \"remarks\": \"Updated results\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results/abc123def456ghi789jkl012mno345pqr",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results",
                        "abc123def456ghi789jkl012mno345pqr"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"abc123def456ghi789jkl012mno345pqr\",\n    \"labRequestId\": \"d2e66463bb2349209ea2cddf47f7822f\",\n    \"patientId\": \"f5768246f4a64410a2a845a4a618f07e\",\n    \"dateTested\": \"2025-08-23T14:30:00.000Z\",\n    \"bloodChemistry\": {\n      \"fbs\": 98.0,\n      \"cholesterol\": 175.5,\n      \"triglycerides\": 105.2\n    },\n    \"urinalysis\": {\n      \"color\": \"Light Yellow\",\n      \"transparency\": \"Clear\",\n      \"protein\": \"Trace\"\n    },\n    \"remarks\": \"Updated results - minor corrections made\",\n    \"createdAt\": \"2025-08-23T10:35:00.000Z\",\n    \"updatedAt\": \"2025-08-23T14:45:00.000Z\"\n  }\n}"
                },
                {
                  "name": "Not Found Response",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"remarks\": \"Updated\"\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results/nonexistent123",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results",
                        "nonexistent123"
                      ]
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Lab test result with ID nonexistent123 not found\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is successful', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "    });",
                      "    ",
                      "    pm.test('Response contains updated lab test result', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('data');",
                      "        pm.expect(jsonData.data).to.have.property('id');",
                      "        pm.expect(jsonData.data).to.have.property('updatedAt');",
                      "    });",
                      "    ",
                      "    pm.test('Updated timestamp is more recent than created timestamp', function () {",
                      "        const jsonData = pm.response.json();",
                      "        const createdAt = new Date(jsonData.data.createdAt);",
                      "        const updatedAt = new Date(jsonData.data.updatedAt);",
                      "        pm.expect(updatedAt.getTime()).to.be.greaterThanOrEqual(createdAt.getTime());",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Error response structure is correct', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.false;",
                      "        pm.expect(jsonData).to.have.property('message');",
                      "    });",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Lab Test Result",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/laboratory/test-results/{{lab_test_result_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "laboratory",
                    "test-results",
                    "{{lab_test_result_id}}"
                  ]
                },
                "description": "üóëÔ∏è **DELETE LAB TEST RESULT**\n\nPermanently delete a lab test result from the system.\n\n**Path Parameters:**\n- `id`: Lab test result ID to delete\n\n**‚ö†Ô∏è Important Notes:**\n- **Permanent Action**: Cannot be undone\n- **Data Integrity**: Validates result exists before deletion\n- **Audit Trail**: Consider logging for compliance\n- **Access Control**: Should be restricted to authorized users\n\n**Business Rules:**\n- Only existing results can be deleted\n- Returns 404 if result doesn't exist\n- Returns success message upon completion\n\n**Use Cases:**\n- Remove duplicate entries\n- Delete erroneous results\n- System cleanup/maintenance\n- Data correction workflows\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"message\": \"Lab test result deleted successfully\"\n}\n```\n\n**Security Considerations:**\n- Implement proper authorization\n- Log deletion activities\n- Consider soft-delete for audit purposes\n- Validate user permissions"
              },
              "response": [
                {
                  "name": "Success Response",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results/abc123def456ghi789jkl012mno345pqr",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results",
                        "abc123def456ghi789jkl012mno345pqr"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"success\": true,\n  \"message\": \"Lab test result deleted successfully\"\n}"
                },
                {
                  "name": "Not Found Response",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/api/laboratory/test-results/nonexistent123",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "laboratory",
                        "test-results",
                        "nonexistent123"
                      ]
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "body": "{\n  \"success\": false,\n  \"message\": \"Lab test result with ID nonexistent123 not found\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is successful', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "    });",
                      "    ",
                      "    pm.test('Response contains success message', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.message).to.equal('Lab test result deleted successfully');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Error response structure is correct', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.false;",
                      "        pm.expect(jsonData).to.have.property('message');",
                      "    });",
                      "    ",
                      "    pm.test('Error message indicates result not found', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.message.toLowerCase()).to.include('not found');",
                      "    });",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}