{
  "info": {
    "_postman_id": "cms-patients-api-collection",
    "name": "CMS - Patient Management API",
    "description": "Patient Management API collection for the Clinic Management System with Clean Architecture.\n\n## üè• Patient Management API (/api/patients)\n\nThis collection focuses specifically on patient management endpoints:\n\n- **Patient CRUD Operations**: Create, read, update, and delete patient records\n- **Patient Statistics**: Comprehensive patient reporting and analytics\n- **Address Management**: Structured Philippine address handling\n- **Guardian Information**: Guardian and emergency contact management\n- **Medical History**: Patient medical history tracking\n- **Search & Filtering**: Advanced patient search capabilities\n- **Validation**: Patient data validation and business rules\n\n## Testing Coverage\n\n- ‚úÖ Patient creation with all required fields\n- ‚úÖ Patient retrieval (single and list)\n- ‚úÖ Patient updates and modifications\n- ‚úÖ Patient deletion (soft delete)\n- ‚úÖ Patient statistics and reporting\n- ‚úÖ Address validation (Philippine format)\n- ‚úÖ Guardian information handling\n- ‚úÖ Error handling (validation, not found, duplicates)\n- ‚úÖ Search and filter functionality\n\n## Environment Variables\n\nThis collection uses the following environment variables:\n- `cms_local`: http://localhost:4000 (for local development)\n- `cms_prod`: https://capstone-api.up.railway.app (for production)\n- `baseUrl`: Base URL for API endpoints\n- `authToken`: JWT token for authenticated requests\n- Various test data variables for dynamic testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 2,
      "minor": 3,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Base URL for the Clinic Management System API server"
    },
    {
      "key": "base_url",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Alias for baseUrl to support different collection formats"
    },
    {
      "key": "cms_local",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "CMS Local environment base URL"
    },
    {
      "key": "cms_prod",
      "value": "https://capstone-api.up.railway.app",
      "type": "string",
      "description": "CMS Production environment base URL"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login operations"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string",
      "description": "Dynamic user ID for testing"
    },
    {
      "key": "testPatientId",
      "value": "",
      "type": "string",
      "description": "Dynamic patient ID for testing"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID for testing"
    },
    {
      "key": "testDoctorId",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor ID for testing"
    },
    {
      "key": "doctor_profile_id",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor profile ID for testing"
    },
    {
      "key": "appointment_id",
      "value": "",
      "type": "string",
      "description": "Dynamic appointment ID for testing"
    },
    {
      "key": "sample_patient_id",
      "value": "1",
      "type": "string",
      "description": "Sample patient ID for appointment testing"
    },
    {
      "key": "sample_doctor_id",
      "value": "1",
      "type": "string",
      "description": "Sample doctor ID for appointment testing"
    },
    {
      "key": "future_date",
      "value": "2025-08-10",
      "type": "string",
      "description": "Future date for appointment testing"
    },
    {
      "key": "updated_date",
      "value": "2025-08-11",
      "type": "string",
      "description": "Updated date for appointment testing"
    },
    {
      "key": "updated_doctor_id",
      "value": "2",
      "type": "string",
      "description": "Updated doctor ID for appointment testing"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Dynamic test email for registration tests"
    },
    {
      "key": "loginTestEmail",
      "value": "test.admin@clinic.com",
      "type": "string",
      "description": "Fixed email for login testing"
    },
    {
      "key": "loginTestPassword",
      "value": "AdminPass123",
      "type": "string",
      "description": "Fixed password for login testing"
    },
    {
      "key": "doctorTestEmail",
      "value": "doctor.test@clinic.com",
      "type": "string",
      "description": "Fixed email for doctor role testing"
    },
    {
      "key": "doctorTestPassword",
      "value": "DoctorPass123",
      "type": "string",
      "description": "Fixed password for doctor role testing"
    },
    {
      "key": "receptionistTestEmail",
      "value": "receptionist.test@clinic.com",
      "type": "string",
      "description": "Fixed email for receptionist role testing"
    },
    {
      "key": "receptionistTestPassword",
      "value": "ReceptionistPass123",
      "type": "string",
      "description": "Fixed password for receptionist role testing"
    },
    {
      "key": "metro_manila_code",
      "value": "METRO_MANILA",
      "type": "string",
      "description": "Metro Manila province code for address testing"
    },
    {
      "key": "cebu_code",
      "value": "CEBU",
      "type": "string",
      "description": "Cebu province code for address testing"
    },
    {
      "key": "davao_code",
      "value": "DAVAO_REGION",
      "type": "string",
      "description": "Davao region code for address testing"
    }
  ],
  "item": [
    {
      "name": "üè• Patient Management API",
      "description": "Patient CRUD operations with comprehensive validation and error handling",
      "item": [
        {
          "name": "Get Patient Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has valid structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.total).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/total",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients",
                "total"
              ]
            },
            "description": "Get patient statistics including total count"
          }
        },
        {
          "name": "Create Patient - Complete Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created patient has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName', 'Juan');",
                  "    pm.expect(patient).to.have.property('lastName', 'Dela Cruz');",
                  "    pm.expect(patient).to.have.property('middleName', 'Santos');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender', 'Male');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "    pm.expect(patient).to.have.property('createdAt');",
                  "    pm.expect(patient).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Address information is structured correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    // Check for structured address fields",
                  "    pm.expect(patient).to.have.property('houseNumber');",
                  "    pm.expect(patient).to.have.property('streetName');",
                  "    pm.expect(patient).to.have.property('barangay');",
                  "    pm.expect(patient).to.have.property('cityMunicipality');",
                  "    pm.expect(patient).to.have.property('province');",
                  "    // Check for computed address field for backward compatibility",
                  "    if (patient.address) {",
                  "        pm.expect(patient.address).to.be.a('string');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Guardian information is included', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('guardianName');",
                  "    pm.expect(patient).to.have.property('guardianGender');",
                  "    pm.expect(patient).to.have.property('guardianRelationship');",
                  "    pm.expect(patient).to.have.property('guardianContactNumber');",
                  "});",
                  "",
                  "pm.test('Patient ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient.id).to.be.a('string');",
                  "    pm.expect(patient.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('testPatientId', patient.id);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Juan\",\n  \"lastName\": \"Dela Cruz\",\n  \"middleName\": \"Santos\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"gender\": \"Male\",\n  \"contactNumber\": \"09171234567\",\n  \"houseNumber\": \"123\",\n  \"streetName\": \"Main Street\",\n  \"barangay\": \"Barangay Santo Ni√±o\",\n  \"cityMunicipality\": \"Quezon City\",\n  \"province\": \"Metro Manila\",\n  \"guardianName\": \"Maria Dela Cruz\",\n  \"guardianGender\": \"Female\",\n  \"guardianRelationship\": \"Mother\",\n  \"guardianContactNumber\": \"09187654321\",\n  \"guardianHouseNumber\": \"123\",\n  \"guardianStreetName\": \"Main Street\",\n  \"guardianBarangay\": \"Barangay Santo Ni√±o\",\n  \"guardianCityMunicipality\": \"Quezon City\",\n  \"guardianProvince\": \"Metro Manila\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Create a new patient with complete information including guardian details"
          }
        },
        {
          "name": "Create Patient - Minimal Required Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Created patient has minimal required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName', 'Ana');",
                  "    pm.expect(patient).to.have.property('lastName', 'Garcia');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender', 'Female');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "});",
                  "",
                  "pm.test('Address fields are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    // At least one address field should be present",
                  "    const hasAddressField = patient.houseNumber || patient.streetName || ",
                  "                           patient.barangay || patient.cityMunicipality || patient.province;",
                  "    pm.expect(hasAddressField).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Ana\",\n  \"lastName\": \"Garcia\",\n  \"dateOfBirth\": \"1985-12-25\",\n  \"gender\": \"Female\",\n  \"contactNumber\": \"09281234567\",\n  \"houseNumber\": \"456\",\n  \"streetName\": \"Oak Avenue\",\n  \"barangay\": \"Poblacion\",\n  \"cityMunicipality\": \"Makati City\",\n  \"province\": \"Metro Manila\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Create a patient with minimal required data (no guardian information)"
          }
        },
        {
          "name": "Get All Patients",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Patient list items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const patient = responseJson.data[0];",
                  "        pm.expect(patient).to.have.property('id');",
                  "        pm.expect(patient).to.have.property('fullName');",
                  "        pm.expect(patient).to.have.property('dateOfBirth');",
                  "        pm.expect(patient).to.have.property('gender');",
                  "        pm.expect(patient).to.have.property('contactNumber');",
                  "        pm.expect(patient).to.have.property('age');",
                  "        pm.expect(patient.age).to.be.a('number');",
                  "        pm.expect(patient.age).to.be.at.least(0);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Retrieve all patients with list-optimized data structure"
          }
        },
        {
          "name": "Get Patient by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Patient has complete information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName');",
                  "    pm.expect(patient).to.have.property('lastName');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "    pm.expect(patient).to.have.property('age');",
                  "    pm.expect(patient).to.have.property('createdAt');",
                  "    pm.expect(patient).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/{{testPatientId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients",
                "{{testPatientId}}"
              ]
            },
            "description": "Retrieve a specific patient by ID with complete information"
          }
        },
        {
          "name": "Get Patient by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404 or 500', function () {",
                  "    // Could be 404 for not found or 500 for invalid ID format",
                  "    pm.expect([404, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error message indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => ",
                  "        msg.includes('not found') || msg.includes('invalid')",
                  "    );",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/nonexistent-patient-id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients",
                "nonexistent-patient-id"
              ]
            },
            "description": "Test error handling when requesting a patient that doesn't exist"
          }
        },
        {
          "name": "Create Patient - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.equal('VALIDATION_ERROR');",
                  "    pm.expect(responseJson.error).to.include('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Incomplete\",\n  \"dateOfBirth\": \"1990-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patients"
              ]
            },
            "description": "Test validation error when required patient fields are missing"
          }
        }
      ]
    }
  ]
}