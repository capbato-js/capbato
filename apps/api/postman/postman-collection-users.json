{
  "info": {
    "_postman_id": "cms-combined-api-collection",
    "name": "Clinic Management System - Complete API Collection",
    "description": "Complete comprehensive API collection for the Clinic Management System with Clean Architecture. This collection combines all individual API collections into a unified testing suite.\n\n## API Coverage\n\n### 🔐 Authentication API (/api/auth)\n- User registration with role-based access (admin, doctor, receptionist)\n- User login with email/username support\n- JWT token management and validation\n- Password strength validation\n- Doctor-specific profile fields during registration\n\n### 👥 User Management (/api/users)\n- User CRUD operations\n- Password change functionality\n- Role-based operations and filtering\n- User profile management\n\n### 👨‍⚕️ Doctor Management (/api/doctors)\n- Doctor profile CRUD operations\n- User-Doctor relationship management\n- Medical specialization tracking\n- License and experience management\n- Philippine and US phone number validation\n\n### 🏥 Patient Management (/api/patients)\n- Patient CRUD operations\n- Patient statistics and reporting\n- Structured Philippine address management\n- Guardian information handling\n- Medical history tracking\n\n### 📅 Schedule Management (/api/schedules)\n- Doctor schedule CRUD operations\n- Date and time validation\n- Schedule statistics and reporting\n- Today's doctor lookup\n- Future schedule filtering\n\n### 📋 Appointment Management (/api/appointments)\n- Appointment CRUD operations\n- Business rule validation (4 per slot, no duplicates)\n- Status management (scheduled, confirmed, cancelled)\n- Patient-Doctor association\n- Time slot management\n\n### 🧪 Laboratory Management (/api/laboratory)\n- Laboratory request management\n- Blood chemistry results tracking\n- Critical value alerting\n- Test selection and validation\n- Patient-lab request association\n\n### 📍 Address API (/api/address)\n- Philippine address hierarchy (provinces, cities, barangays)\n- Address validation and lookup\n- Geographic data management\n\n### ✅ Todo Management (/api/todos)\n- Complete todo CRUD operations\n- Priority and completion management\n- Todo filtering and statistics\n\n## Testing Strategy\n\nThis collection follows comprehensive testing best practices:\n- **Happy Path Testing**: Core functionality validation\n- **Error Handling**: Validation errors, authentication failures, not found scenarios\n- **Schema Validation**: Response structure verification\n- **Dynamic Data**: Variable management for realistic test flows\n- **Performance Testing**: Response time validations\n- **Security Testing**: Authentication and authorization flows\n- **Business Logic Testing**: Complex validation rules and constraints\n\n## Environment Variables\n\nUse the following environment variables:\n- `cms_local`: http://localhost:4000 (for local development)\n- `cms_prod`: https://capstone-api.up.railway.app (for production)\n- `baseUrl`: Base URL for backward compatibility\n- `authToken`: JWT token for authenticated requests\n- Various test data variables for dynamic testing\n\n## Collection Organization\n\nThe collection is organized into logical folders matching the API structure:\n1. 🏥 Server Health & Info\n2. 🔐 Authentication API\n3. 👥 User Management API\n4. 👨‍⚕️ Doctor Management API\n5. 🏥 Patient Management API (from copy collection)\n6. 📅 Schedule Management API\n7. 📋 Appointment Management API\n8. 🧪 Laboratory Management API\n9. 📍 Address API\n10. ✅ Todo Management API (from copy collection)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 2,
      "minor": 3,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Base URL for the Clinic Management System API server"
    },
    {
      "key": "base_url",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Alias for baseUrl to support different collection formats"
    },
    {
      "key": "cms_local",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "CMS Local environment base URL"
    },
    {
      "key": "cms_prod",
      "value": "https://capstone-api.up.railway.app",
      "type": "string",
      "description": "CMS Production environment base URL"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login operations"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string",
      "description": "Dynamic user ID for testing"
    },
    {
      "key": "testPatientId",
      "value": "",
      "type": "string",
      "description": "Dynamic patient ID for testing"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID for testing"
    },
    {
      "key": "testDoctorId",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor ID for testing"
    },
    {
      "key": "doctor_profile_id",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor profile ID for testing"
    },
    {
      "key": "appointment_id",
      "value": "",
      "type": "string",
      "description": "Dynamic appointment ID for testing"
    },
    {
      "key": "sample_patient_id",
      "value": "1",
      "type": "string",
      "description": "Sample patient ID for appointment testing"
    },
    {
      "key": "sample_doctor_id",
      "value": "1",
      "type": "string",
      "description": "Sample doctor ID for appointment testing"
    },
    {
      "key": "future_date",
      "value": "2025-08-10",
      "type": "string",
      "description": "Future date for appointment testing"
    },
    {
      "key": "updated_date",
      "value": "2025-08-11",
      "type": "string",
      "description": "Updated date for appointment testing"
    },
    {
      "key": "updated_doctor_id",
      "value": "2",
      "type": "string",
      "description": "Updated doctor ID for appointment testing"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Dynamic test email for registration tests"
    },
    {
      "key": "loginTestEmail",
      "value": "test.admin@clinic.com",
      "type": "string",
      "description": "Fixed email for login testing"
    },
    {
      "key": "loginTestPassword",
      "value": "AdminPass123",
      "type": "string",
      "description": "Fixed password for login testing"
    },
    {
      "key": "doctorTestEmail",
      "value": "doctor.test@clinic.com",
      "type": "string",
      "description": "Fixed email for doctor role testing"
    },
    {
      "key": "doctorTestPassword",
      "value": "DoctorPass123",
      "type": "string",
      "description": "Fixed password for doctor role testing"
    },
    {
      "key": "receptionistTestEmail",
      "value": "receptionist.test@clinic.com",
      "type": "string",
      "description": "Fixed email for receptionist role testing"
    },
    {
      "key": "receptionistTestPassword",
      "value": "ReceptionistPass123",
      "type": "string",
      "description": "Fixed password for receptionist role testing"
    },
    {
      "key": "metro_manila_code",
      "value": "METRO_MANILA",
      "type": "string",
      "description": "Metro Manila province code for address testing"
    },
    {
      "key": "cebu_code",
      "value": "CEBU",
      "type": "string",
      "description": "Cebu province code for address testing"
    },
    {
      "key": "davao_code",
      "value": "DAVAO_REGION",
      "type": "string",
      "description": "Davao region code for address testing"
    }
  ],
  "item": [
    {
      "name": "👥 User Management API",
      "description": "User management operations including listing users and password changes",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Users array contains valid user objects', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const user = responseJson.data[0];",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('fullName');",
                  "        pm.expect(user).to.have.property('role');",
                  "        pm.expect(user).to.have.property('mobile');",
                  "        pm.expect(user.id).to.be.a('string');",
                  "        pm.expect(user.fullName).to.be.a('string');",
                  "        pm.expect(user.role).to.be.oneOf(['admin', 'doctor', 'receptionist']);",
                  "        // mobile can be string or null",
                  "        if (user.mobile !== null) {",
                  "            pm.expect(user.mobile).to.be.a('string');",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "pm.test('Test user is in the list', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const testUserId = pm.collectionVariables.get('testUserId');",
                  "    if (testUserId) {",
                  "        const testUser = responseJson.data.find(user => user.id === testUserId);",
                  "        pm.expect(testUser).to.exist;",
                  "        pm.expect(testUser.role).to.equal('admin');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users"
              ]
            },
            "description": "Retrieve all users in the system with their basic information"
          }
        },
        {
          "name": "Change User Password - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('message', 'Password updated.');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newPassword\": \"NewPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}",
                "password"
              ]
            },
            "description": "Change password for a specific user by their ID"
          }
        },
        {
          "name": "Change Password - User Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 500', function () {",
                  "    // Could be 500 if user not found, or 400 if ID validation fails",
                  "    pm.expect([400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error message indicates user not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error.toLowerCase()).to.include('not found');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newPassword\": \"ValidPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/nonexistent-user-id/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "nonexistent-user-id",
                "password"
              ]
            },
            "description": "Test error handling when trying to change password for a non-existent user"
          }
        },
        {
          "name": "Change Password - Missing Password Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error indicates missing password field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(function(msg) {",
                  "        return msg.includes('password') && (msg.includes('required') || msg.includes('missing'));",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"oldPassword\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}",
                "password"
              ]
            },
            "description": "Test validation error when newPassword field is missing from request"
          }
        },
        {
          "name": "Update User Details - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('User data has expected structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const userData = responseJson.data;",
                  "    pm.expect(userData).to.have.property('id');",
                  "    pm.expect(userData).to.have.property('firstName');",
                  "    pm.expect(userData).to.have.property('lastName');",
                  "    pm.expect(userData).to.have.property('email');",
                  "    pm.expect(userData).to.have.property('username');",
                  "    pm.expect(userData).to.have.property('role');",
                  "    pm.expect(userData).to.have.property('createdAt');",
                  "    // mobile is optional",
                  "    pm.expect(userData.id).to.be.a('string');",
                  "    pm.expect(userData.firstName).to.be.a('string');",
                  "    pm.expect(userData.lastName).to.be.a('string');",
                  "    pm.expect(userData.email).to.be.a('string');",
                  "    pm.expect(userData.username).to.be.a('string');",
                  "    pm.expect(userData.role).to.be.oneOf(['admin', 'doctor', 'receptionist']);",
                  "});",
                  "",
                  "pm.test('Updated data matches request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    const userData = responseJson.data;",
                  "    ",
                  "    if (requestBody.firstName) {",
                  "        pm.expect(userData.firstName).to.equal(requestBody.firstName);",
                  "    }",
                  "    if (requestBody.lastName) {",
                  "        pm.expect(userData.lastName).to.equal(requestBody.lastName);",
                  "    }",
                  "    if (requestBody.email) {",
                  "        pm.expect(userData.email).to.equal(requestBody.email);",
                  "    }",
                  "    if (requestBody.mobile) {",
                  "        pm.expect(userData.mobile).to.equal(requestBody.mobile);",
                  "    }",
                  "    if (requestBody.role) {",
                  "        pm.expect(userData.role).to.equal(requestBody.role);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"UpdatedFirstName\",\n  \"lastName\": \"UpdatedLastName\",\n  \"email\": \"updated.email@example.com\",\n  \"mobile\": \"09876543210\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}"
              ]
            },
            "description": "Update user details including firstName, lastName, email, mobile, and role"
          }
        },
        {
          "name": "Update User Details - Partial Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Only firstName updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    const userData = responseJson.data;",
                  "    ",
                  "    pm.expect(userData.firstName).to.equal(requestBody.firstName);",
                  "    // Other fields should remain unchanged from previous state",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"PartiallyUpdatedName\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}"
              ]
            },
            "description": "Test partial update - update only one field (firstName)"
          }
        },
        {
          "name": "Update User Details - User Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 500', function () {",
                  "    // Could be 500 if user not found, or 400 if ID validation fails",
                  "    pm.expect([400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error message indicates user not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error.toLowerCase()).to.include('not found');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"SomeFirstName\",\n  \"lastName\": \"SomeLastName\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/nonexistent-user-id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "nonexistent-user-id"
              ]
            },
            "description": "Test error handling when trying to update a non-existent user"
          }
        },
        {
          "name": "Update User Details - Invalid Email Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error indicates email validation issue', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(function(msg) {",
                  "        return msg.includes('email') && (msg.includes('invalid') || msg.includes('format'));",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email-format\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}"
              ]
            },
            "description": "Test validation error when providing invalid email format"
          }
        },
        {
          "name": "Update User Details - Invalid Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error indicates invalid role', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(function(msg) {",
                  "        return msg.includes('role') && msg.includes('invalid');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"invalid-role\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users",
                "{{testUserId}}"
              ]
            },
            "description": "Test validation error when providing invalid role value"
          }
        }
      ]
    }
  ]
}