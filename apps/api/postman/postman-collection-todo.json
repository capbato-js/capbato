{
  "info": {
    "_postman_id": "cms-todo-api-collection",
    "name": "CMS - Todo Management API",
    "description": "Todo Management API collection for the Clinic Management System with Clean Architecture.\n\n## ✅ Todo Management API (/api/todos)\n\nThis collection focuses specifically on todo and task management endpoints:\n\n- **Todo CRUD Operations**: Create, read, update, and delete todo items\n- **Priority Management**: Set and manage todo priorities (low, medium, high, urgent)\n- **Completion Tracking**: Mark todos as completed/incomplete with timestamps\n- **Todo Filtering**: Filter todos by status, priority, date, and other criteria\n- **Todo Statistics**: Generate statistics and reports on todo completion\n- **Bulk Operations**: Manage multiple todos efficiently\n- **Due Date Management**: Set and track todo due dates and deadlines\n\n## Testing Coverage\n\n- ✅ Todo creation with all fields\n- ✅ Todo retrieval (single and list)\n- ✅ Todo updates and modifications\n- ✅ Todo deletion and soft delete\n- ✅ Priority management and validation\n- ✅ Completion status tracking\n- ✅ Todo filtering and search\n- ✅ Due date validation and tracking\n- ✅ Error handling (validation, not found, duplicates)\n- ✅ Todo statistics and reporting\n\n## Environment Variables\n\nThis collection uses the following environment variables:\n- `cms_local`: http://localhost:4000 (for local development)\n- `cms_prod`: https://capstone-api.up.railway.app (for production)\n- `baseUrl`: Base URL for API endpoints\n- `authToken`: JWT token for authenticated requests\n- Various test data variables for dynamic testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 2,
      "minor": 3,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Base URL for the Clinic Management System API server"
    },
    {
      "key": "base_url",
      "value": "{{cms_local}}",
      "type": "string",
      "description": "Alias for baseUrl to support different collection formats"
    },
    {
      "key": "cms_local",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "CMS Local environment base URL"
    },
    {
      "key": "cms_prod",
      "value": "https://capstone-api.up.railway.app",
      "type": "string",
      "description": "CMS Production environment base URL"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login operations"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string",
      "description": "Dynamic user ID for testing"
    },
    {
      "key": "testPatientId",
      "value": "",
      "type": "string",
      "description": "Dynamic patient ID for testing"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID for testing"
    },
    {
      "key": "testDoctorId",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor ID for testing"
    },
    {
      "key": "doctor_profile_id",
      "value": "",
      "type": "string",
      "description": "Dynamic doctor profile ID for testing"
    },
    {
      "key": "appointment_id",
      "value": "",
      "type": "string",
      "description": "Dynamic appointment ID for testing"
    },
    {
      "key": "sample_patient_id",
      "value": "1",
      "type": "string",
      "description": "Sample patient ID for appointment testing"
    },
    {
      "key": "sample_doctor_id",
      "value": "1",
      "type": "string",
      "description": "Sample doctor ID for appointment testing"
    },
    {
      "key": "future_date",
      "value": "2025-08-10",
      "type": "string",
      "description": "Future date for appointment testing"
    },
    {
      "key": "updated_date",
      "value": "2025-08-11",
      "type": "string",
      "description": "Updated date for appointment testing"
    },
    {
      "key": "updated_doctor_id",
      "value": "2",
      "type": "string",
      "description": "Updated doctor ID for appointment testing"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Dynamic test email for registration tests"
    },
    {
      "key": "loginTestEmail",
      "value": "test.admin@clinic.com",
      "type": "string",
      "description": "Fixed email for login testing"
    },
    {
      "key": "loginTestPassword",
      "value": "AdminPass123",
      "type": "string",
      "description": "Fixed password for login testing"
    },
    {
      "key": "doctorTestEmail",
      "value": "doctor.test@clinic.com",
      "type": "string",
      "description": "Fixed email for doctor role testing"
    },
    {
      "key": "doctorTestPassword",
      "value": "DoctorPass123",
      "type": "string",
      "description": "Fixed password for doctor role testing"
    },
    {
      "key": "receptionistTestEmail",
      "value": "receptionist.test@clinic.com",
      "type": "string",
      "description": "Fixed email for receptionist role testing"
    },
    {
      "key": "receptionistTestPassword",
      "value": "ReceptionistPass123",
      "type": "string",
      "description": "Fixed password for receptionist role testing"
    },
    {
      "key": "metro_manila_code",
      "value": "METRO_MANILA",
      "type": "string",
      "description": "Metro Manila province code for address testing"
    },
    {
      "key": "cebu_code",
      "value": "CEBU",
      "type": "string",
      "description": "Cebu province code for address testing"
    },
    {
      "key": "davao_code",
      "value": "DAVAO_REGION",
      "type": "string",
      "description": "Davao region code for address testing"
    }
  ],
  "item": [
    {
      "name": "✅ Todo Management API",
      "description": "Complete todo CRUD operations with filtering, statistics, and comprehensive validation",
      "item": [
        {
          "name": "Create Todo - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created todo has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title', 'Complete clinic management system documentation');",
                  "    pm.expect(todo).to.have.property('completed', false);",
                  "    pm.expect(todo).to.have.property('priority', 'high');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Todo ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.id).to.be.a('string');",
                  "    pm.expect(todo.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('todoId', todo.id);",
                  "});",
                  "",
                  "pm.test('Timestamps are valid ISO strings', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "    pm.expect(todo.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete clinic management system documentation\",\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos"
              ]
            },
            "description": "Create a new todo with required fields"
          }
        },
        {
          "name": "Get All Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Todo items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const todo = responseJson.data[0];",
                  "        pm.expect(todo).to.have.property('id');",
                  "        pm.expect(todo).to.have.property('title');",
                  "        pm.expect(todo).to.have.property('completed');",
                  "        pm.expect(todo).to.have.property('priority');",
                  "        pm.expect(todo).to.have.property('createdAt');",
                  "        pm.expect(todo).to.have.property('updatedAt');",
                  "        pm.expect(todo.completed).to.be.a('boolean');",
                  "        pm.expect(todo.priority).to.be.oneOf(['low', 'medium', 'high']);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos"
              ]
            },
            "description": "Retrieve all todos regardless of completion status"
          }
        },
        {
          "name": "Get Todo by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Todo has complete information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title');",
                  "    pm.expect(todo).to.have.property('completed');",
                  "    pm.expect(todo).to.have.property('priority');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}"
              ]
            },
            "description": "Retrieve a specific todo by its ID"
          }
        },
        {
          "name": "Get Active Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All todos are active (not completed)', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(function(todo) {",
                  "        pm.expect(todo.completed).to.be.false;",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/active",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "active"
              ]
            },
            "description": "Retrieve only active (not completed) todos"
          }
        },
        {
          "name": "Get Todo Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats).to.have.property('active');",
                  "    pm.expect(stats).to.have.property('completed');",
                  "    pm.expect(stats).to.have.property('overdue');",
                  "    pm.expect(stats).to.have.property('highPriority');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.active).to.be.a('number');",
                  "    pm.expect(stats.completed).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Statistics are mathematically consistent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats.total).to.equal(stats.active + stats.completed);",
                  "    pm.expect(stats.active).to.be.at.least(0);",
                  "    pm.expect(stats.completed).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "stats"
              ]
            },
            "description": "Get statistics about todos including total, active, completed, overdue, and high priority counts"
          }
        },
        {
          "name": "Update Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo updated successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated clinic management documentation\",\n  \"priority\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}"
              ]
            },
            "description": "Update a todo with new values"
          }
        },
        {
          "name": "Toggle Todo Completion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo toggled successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}/toggle",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}",
                "toggle"
              ]
            },
            "description": "Toggle the completion status of a todo"
          }
        },
        {
          "name": "Delete Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo deleted successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos",
                "{{todoId}}"
              ]
            },
            "description": "Delete a todo by its ID"
          }
        },
        {
          "name": "Create Todo - Missing Title (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "});",
                  "",
                  "pm.test('Error indicates title is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.include('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "todos"
              ]
            },
            "description": "Test validation error when title is missing"
          }
        }
      ]
    }
  ]
}