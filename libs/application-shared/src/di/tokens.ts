// DI Container tokens following Clean Architecture layers
export const TOKENS = {
  // Infrastructure Layer - HTTP and API Services
  HttpClient: 'IHttpClient',
  TodoApiService: 'ITodoApiService',
  AuthApiService: 'IAuthApiService',
  PatientApiService: 'IPatientApiService',
  UserApiService: 'IUserApiService',
  DoctorApiService: 'IDoctorApiService',
  AddressApiService: 'IAddressApiService',
  LaboratoryApiService: 'ILaboratoryApiService',
  PrescriptionApiService: 'IPrescriptionApiService',
  
  // Infrastructure Layer - Repositories
  TodoRepository: 'ITodoRepository',
  UserRepository: 'IUserRepository',
  PatientRepository: 'IPatientRepository',
  DoctorRepository: 'IDoctorRepository',
  AddressRepository: 'IAddressRepository',
  ScheduleRepository: 'IScheduleRepository',
  AppointmentRepository: 'IAppointmentRepository',
  LabRequestRepository: 'ILabRequestRepository',
  BloodChemistryRepository: 'IBloodChemistryRepository',
  UrinalysisResultRepository: 'IUrinalysisResultRepository',
  HematologyResultRepository: 'IHematologyResultRepository',
  FecalysisResultRepository: 'IFecalysisResultRepository',
  SerologyResultRepository: 'ISerologyResultRepository',
  PrescriptionRepository: 'IPrescriptionRepository',
  ReceiptRepository: 'IReceiptRepository',

  // Infrastructure Layer - Services
  PasswordHashingService: 'IPasswordHashingService',
  JwtService: 'IJwtService',

  // Application Layer - CQRS Services (Interface-based for cleaner injection)
  TodoCommandService: 'ITodoCommandService',
  TodoQueryService: 'ITodoQueryService',
  AuthCommandService: 'IAuthCommandService',
  AuthQueryService: 'IAuthQueryService',
  PatientCommandService: 'IPatientCommandService',
  PatientQueryService: 'IPatientQueryService',
  UserCommandService: 'UserCommandService',
  UserQueryService: 'IUserQueryService',
  PrescriptionCommandService: 'IPrescriptionCommandService',
  PrescriptionQueryService: 'IPrescriptionQueryService',
  ScheduleWithDoctorService: 'ScheduleWithDoctorService',

  // Application Layer - Use Cases (Commands)
  CreateTodoUseCase: 'CreateTodoUseCase',
  UpdateTodoUseCase: 'UpdateTodoUseCase',
  DeleteTodoUseCase: 'DeleteTodoUseCase',
  ToggleTodoUseCase: 'ToggleTodoUseCase',
  RegisterUserUseCase: 'RegisterUserUseCase',
  LoginUserUseCase: 'LoginUserUseCase',
  ChangeUserPasswordUseCase: 'ChangeUserPasswordUseCase',
  UpdateUserDetailsUseCase: 'UpdateUserDetailsUseCase',
  CreatePatientUseCase: 'CreatePatientUseCase',
  UpdatePatientUseCase: 'UpdatePatientUseCase',
  CreateDoctorProfileCommandHandler: 'CreateDoctorProfileCommandHandler',
  UpdateDoctorSchedulePatternUseCase: 'UpdateDoctorSchedulePatternUseCase',
  RemoveDoctorSchedulePatternUseCase: 'RemoveDoctorSchedulePatternUseCase',
  InitializeDoctorSchedulesUseCase: 'InitializeDoctorSchedulesUseCase',
  CreateScheduleUseCase: 'CreateScheduleUseCase',
  UpdateScheduleUseCase: 'UpdateScheduleUseCase',
  DeleteScheduleUseCase: 'DeleteScheduleUseCase',
  CreateAppointmentUseCase: 'CreateAppointmentUseCase',
  UpdateAppointmentUseCase: 'UpdateAppointmentUseCase',
  DeleteAppointmentUseCase: 'DeleteAppointmentUseCase',
  ConfirmAppointmentUseCase: 'ConfirmAppointmentUseCase',
  CancelAppointmentUseCase: 'CancelAppointmentUseCase',
  CompleteAppointmentUseCase: 'CompleteAppointmentUseCase',
  RescheduleAppointmentUseCase: 'RescheduleAppointmentUseCase',

  // Laboratory Layer - Use Cases (Commands)
  CreateLabRequestUseCase: 'CreateLabRequestUseCase',
  UpdateLabRequestUseCase: 'UpdateLabRequestUseCase',
  DeleteLabRequestUseCase: 'DeleteLabRequestUseCase',
  UpdateLabRequestResultsUseCase: 'UpdateLabRequestResultsUseCase',
  UpdateLabRequestStatusByIdUseCase: 'UpdateLabRequestStatusByIdUseCase',
  CreateBloodChemistryUseCase: 'CreateBloodChemistryUseCase',
  UpdateBloodChemistryUseCase: 'UpdateBloodChemistryUseCase',
  DeleteBloodChemistryUseCase: 'DeleteBloodChemistryUseCase',
  CreateUrinalysisResultUseCase: 'CreateUrinalysisResultUseCase',
  UpdateUrinalysisResultUseCase: 'UpdateUrinalysisResultUseCase',
  DeleteUrinalysisResultUseCase: 'DeleteUrinalysisResultUseCase',
  CreateHematologyResultUseCase: 'CreateHematologyResultUseCase',
  UpdateHematologyResultUseCase: 'UpdateHematologyResultUseCase',
  DeleteHematologyResultUseCase: 'DeleteHematologyResultUseCase',
  CreateFecalysisResultUseCase: 'CreateFecalysisResultUseCase',
  UpdateFecalysisResultUseCase: 'UpdateFecalysisResultUseCase',
  DeleteFecalysisResultUseCase: 'DeleteFecalysisResultUseCase',
  CreateSerologyResultUseCase: 'CreateSerologyResultUseCase',
  UpdateSerologyResultUseCase: 'UpdateSerologyResultUseCase',
  DeleteSerologyResultUseCase: 'DeleteSerologyResultUseCase',

  // Prescription Layer - Use Cases (Commands)
  CreatePrescriptionUseCase: 'CreatePrescriptionUseCase',
  UpdatePrescriptionUseCase: 'UpdatePrescriptionUseCase',
  DeletePrescriptionUseCase: 'DeletePrescriptionUseCase',
  CreateTransactionUseCase: 'CreateTransactionUseCase',
  DeleteTransactionUseCase: 'DeleteTransactionUseCase',

  // Application Layer - Use Cases (Queries)
  GetAllTodosQueryHandler: 'GetAllTodosQueryHandler',
  GetFilteredTodosQueryHandler: 'GetFilteredTodosQueryHandler',
  GetActiveTodosQueryHandler: 'GetActiveTodosQueryHandler',
  GetCompletedTodosQueryHandler: 'GetCompletedTodosQueryHandler',
  GetTodoStatsQueryHandler: 'GetTodoStatsQueryHandler',
  GetTodoByIdQueryHandler: 'GetTodoByIdQueryHandler',
  GetAllUsersQueryHandler: 'GetAllUsersQueryHandler',
  GetAllPatientsQueryHandler: 'GetAllPatientsQueryHandler',
  GetPatientByIdQueryHandler: 'GetPatientByIdQueryHandler',
  GetPatientStatsQueryHandler: 'GetPatientStatsQueryHandler',
  GetAllDoctorsQueryHandler: 'GetAllDoctorsQueryHandler',
  GetDoctorByIdQueryHandler: 'GetDoctorByIdQueryHandler',
  GetDoctorByUserIdQueryHandler: 'GetDoctorByUserIdQueryHandler',
  GetDoctorsBySpecializationQueryHandler: 'GetDoctorsBySpecializationQueryHandler',
  CheckDoctorProfileExistsQueryHandler: 'CheckDoctorProfileExistsQueryHandler',

  // Laboratory Layer - Query Handlers
  GetAllLabRequestsQueryHandler: 'GetAllLabRequestsQueryHandler',
  GetLabRequestByIdQueryHandler: 'GetLabRequestByIdQueryHandler',
  GetLabRequestByPatientIdQueryHandler: 'GetLabRequestByPatientIdQueryHandler',
  GetCompletedLabRequestsQueryHandler: 'GetCompletedLabRequestsQueryHandler',
  GetAllUrinalysisResultsQueryHandler: 'GetAllUrinalysisResultsQueryHandler',
  GetUrinalysisResultByIdQueryHandler: 'GetUrinalysisResultByIdQueryHandler',
  GetUrinalysisResultsByPatientIdQueryHandler: 'GetUrinalysisResultsByPatientIdQueryHandler',
  GetAllHematologyResultsQueryHandler: 'GetAllHematologyResultsQueryHandler',
  GetHematologyResultByIdQueryHandler: 'GetHematologyResultByIdQueryHandler',
  GetHematologyResultsByPatientIdQueryHandler: 'GetHematologyResultsByPatientIdQueryHandler',
  GetAllFecalysisResultsQueryHandler: 'GetAllFecalysisResultsQueryHandler',
  GetFecalysisResultByIdQueryHandler: 'GetFecalysisResultByIdQueryHandler',
  GetFecalysisResultsByPatientIdQueryHandler: 'GetFecalysisResultsByPatientIdQueryHandler',
  GetAllSerologyResultsQueryHandler: 'GetAllSerologyResultsQueryHandler',
  GetSerologyResultByIdQueryHandler: 'GetSerologyResultByIdQueryHandler',
  GetSerologyResultsByPatientIdQueryHandler: 'GetSerologyResultsByPatientIdQueryHandler',
  GetPendingLabRequestsQueryHandler: 'GetPendingLabRequestsQueryHandler',
  GetAllBloodChemistryQueryHandler: 'GetAllBloodChemistryQueryHandler',
  GetBloodChemistryByIdQueryHandler: 'GetBloodChemistryByIdQueryHandler',
  GetBloodChemistryByPatientIdQueryHandler: 'GetBloodChemistryByPatientIdQueryHandler',
  GetBloodChemistryByPatientNameQueryHandler: 'GetBloodChemistryByPatientNameQueryHandler',
  GetAllProvincesQueryHandler: 'GetAllProvincesQueryHandler',
  GetCitiesByProvinceCodeQueryHandler: 'GetCitiesByProvinceCodeQueryHandler',
  GetBarangaysByCityCodeQueryHandler: 'GetBarangaysByCityCodeQueryHandler',
  GetAllSchedulesQueryHandler: 'GetAllSchedulesQueryHandler',
  GetScheduleByIdQueryHandler: 'GetScheduleByIdQueryHandler',
  GetSchedulesByDateQueryHandler: 'GetSchedulesByDateQueryHandler',
  GetSchedulesByDoctorQueryHandler: 'GetSchedulesByDoctorQueryHandler',
  GetTodaySchedulesQueryHandler: 'GetTodaySchedulesQueryHandler',
  GetTodayDoctorQueryHandler: 'GetTodayDoctorQueryHandler',
  GetScheduleStatsQueryHandler: 'GetScheduleStatsQueryHandler',
  GetAllAppointmentsQueryHandler: 'GetAllAppointmentsQueryHandler',
  GetAppointmentByIdQueryHandler: 'GetAppointmentByIdQueryHandler',
  GetAppointmentsByPatientIdQueryHandler: 'GetAppointmentsByPatientIdQueryHandler',
  GetTodayAppointmentsQueryHandler: 'GetTodayAppointmentsQueryHandler',
  GetTodayConfirmedAppointmentsQueryHandler: 'GetTodayConfirmedAppointmentsQueryHandler',
  GetConfirmedAppointmentsQueryHandler: 'GetConfirmedAppointmentsQueryHandler',
  GetAppointmentsByDateQueryHandler: 'GetAppointmentsByDateQueryHandler',
  GetAppointmentsByDateRangeQueryHandler: 'GetAppointmentsByDateRangeQueryHandler',
  GetWeeklyAppointmentSummaryQueryHandler: 'GetWeeklyAppointmentSummaryQueryHandler',
  GetAppointmentStatsQueryHandler: 'GetAppointmentStatsQueryHandler',
  GetCurrentPatientAppointmentQueryHandler: 'GetCurrentPatientAppointmentQueryHandler',

  // Prescription Layer - Query Handlers
  GetAllPrescriptionsQueryHandler: 'GetAllPrescriptionsQueryHandler',
  GetPrescriptionByIdQueryHandler: 'GetPrescriptionByIdQueryHandler',
  GetPrescriptionsByPatientIdQueryHandler: 'GetPrescriptionsByPatientIdQueryHandler',
  GetPrescriptionsByDoctorIdQueryHandler: 'GetPrescriptionsByDoctorIdQueryHandler',
  GetActivePrescriptionsQueryHandler: 'GetActivePrescriptionsQueryHandler',
  GetExpiredPrescriptionsQueryHandler: 'GetExpiredPrescriptionsQueryHandler',
  GetPrescriptionsByMedicationNameQueryHandler: 'GetPrescriptionsByMedicationNameQueryHandler',
  GetPrescriptionStatsQueryHandler: 'GetPrescriptionStatsQueryHandler',
  GetAllTransactionsQueryHandler: 'GetAllTransactionsQueryHandler',
  GetTransactionByIdQueryHandler: 'GetTransactionByIdQueryHandler',

  // Domain Layer - Services
  TodoDomainService: 'TodoDomainService',
  UserDomainService: 'UserDomainService',
  PatientNumberService: 'PatientNumberService',
  PhoneNumberService: 'PhoneNumberService',
  AgeCalculationService: 'AgeCalculationService',
  AppointmentDomainService: 'AppointmentDomainService',

  // Application Layer - Validation Services
  CreateTodoValidationService: 'CreateTodoValidationService',
  UpdateTodoValidationService: 'UpdateTodoValidationService', 
  DeleteTodoValidationService: 'DeleteTodoValidationService',
  ToggleTodoValidationService: 'ToggleTodoValidationService',
  TodoValidationService: 'TodoValidationService',
  RegisterUserValidationService: 'RegisterUserValidationService',
  LoginUserValidationService: 'LoginUserValidationService',
  UpdateUserDetailsValidationService: 'UpdateUserDetailsValidationService',
  UserValidationService: 'UserValidationService',
  CreatePatientValidationService: 'CreatePatientValidationService',
  UpdatePatientValidationService: 'UpdatePatientValidationService',
  GetPatientByIdValidationService: 'GetPatientByIdValidationService',
  PatientValidationService: 'PatientValidationService',
  GetDoctorByIdValidationService: 'GetDoctorByIdValidationService',
  GetDoctorsBySpecializationValidationService: 'GetDoctorsBySpecializationValidationService',
  DoctorValidationService: 'DoctorValidationService',
  GetCitiesValidationService: 'GetCitiesValidationService',
  GetBarangaysValidationService: 'GetBarangaysValidationService',
  AddressValidationService: 'AddressValidationService',
  CreateScheduleValidationService: 'CreateScheduleValidationService',
  UpdateScheduleValidationService: 'UpdateScheduleValidationService',
  DeleteScheduleValidationService: 'DeleteScheduleValidationService',
  GetScheduleByIdValidationService: 'GetScheduleByIdValidationService',
  GetSchedulesByDateValidationService: 'GetSchedulesByDateValidationService',
  GetSchedulesByDoctorValidationService: 'GetSchedulesByDoctorValidationService',
  ScheduleValidationService: 'ScheduleValidationService',
  CreateAppointmentValidationService: 'CreateAppointmentValidationService',
  UpdateAppointmentValidationService: 'UpdateAppointmentValidationService',
  DeleteAppointmentValidationService: 'DeleteAppointmentValidationService',
  ConfirmAppointmentValidationService: 'ConfirmAppointmentValidationService',
  CancelAppointmentValidationService: 'CancelAppointmentValidationService',
  CompleteAppointmentValidationService: 'CompleteAppointmentValidationService',
  RescheduleAppointmentValidationService: 'RescheduleAppointmentValidationService',
  GetAppointmentByIdValidationService: 'GetAppointmentByIdValidationService',
  GetAppointmentsByPatientIdValidationService: 'GetAppointmentsByPatientIdValidationService',
  GetAppointmentsByDateValidationService: 'GetAppointmentsByDateValidationService',
  GetAppointmentsByDateRangeValidationService: 'GetAppointmentsByDateRangeValidationService',
  AppointmentValidationService: 'AppointmentValidationService',

  // Laboratory Layer - Validation Services
  CreateLabRequestValidationService: 'CreateLabRequestValidationService',
  UpdateLabRequestValidationService: 'UpdateLabRequestValidationService',
  DeleteLabRequestValidationService: 'DeleteLabRequestValidationService',
  UpdateLabRequestResultsValidationService: 'UpdateLabRequestResultsValidationService',
  CreateBloodChemistryValidationService: 'CreateBloodChemistryValidationService',
  UpdateBloodChemistryValidationService: 'UpdateBloodChemistryValidationService',
  DeleteBloodChemistryValidationService: 'DeleteBloodChemistryValidationService',
  CreateUrinalysisResultValidationService: 'CreateUrinalysisResultValidationService',
  UpdateUrinalysisResultValidationService: 'UpdateUrinalysisResultValidationService',
  CreateHematologyResultValidationService: 'CreateHematologyResultValidationService',
  UpdateHematologyResultValidationService: 'UpdateHematologyResultValidationService',
  CreateFecalysisResultValidationService: 'CreateFecalysisResultValidationService',
  UpdateFecalysisResultValidationService: 'UpdateFecalysisResultValidationService',
  CreateSerologyResultValidationService: 'CreateSerologyResultValidationService',
  UpdateSerologyResultValidationService: 'UpdateSerologyResultValidationService',
  LaboratoryValidationService: 'LaboratoryValidationService',

  // Prescription Layer - Validation Services
  CreatePrescriptionValidationService: 'CreatePrescriptionValidationService',
  UpdatePrescriptionValidationService: 'UpdatePrescriptionValidationService',
  DeletePrescriptionValidationService: 'DeletePrescriptionValidationService',
  PrescriptionValidationService: 'PrescriptionValidationService',
  CreateTransactionValidationService: 'CreateTransactionValidationService',
  DeleteTransactionValidationService: 'DeleteTransactionValidationService',
  GetTransactionByIdValidationService: 'GetTransactionByIdValidationService',
  GetAllTransactionsValidationService: 'GetAllTransactionsValidationService',
  TransactionValidationService: 'TransactionValidationService',

  // Schedule Override Layer - Repositories
  ScheduleOverrideRepository: 'IScheduleOverrideRepository',

  // Schedule Override Layer - Use Cases
  CreateScheduleOverrideUseCase: 'CreateScheduleOverrideUseCase',
  UpdateScheduleOverrideUseCase: 'UpdateScheduleOverrideUseCase',
  DeleteScheduleOverrideUseCase: 'DeleteScheduleOverrideUseCase',

  // Schedule Override Layer - Query Handlers
  GetAllScheduleOverridesQueryHandler: 'GetAllScheduleOverridesQueryHandler',
  GetScheduleOverrideByIdQueryHandler: 'GetScheduleOverrideByIdQueryHandler',
  GetScheduleOverrideByDateQueryHandler: 'GetScheduleOverrideByDateQueryHandler',
  GetScheduleOverridesByDateRangeQueryHandler: 'GetScheduleOverridesByDateRangeQueryHandler',
  GetScheduleOverridesByDoctorQueryHandler: 'GetScheduleOverridesByDoctorQueryHandler',
  GetScheduleOverridesByDatesQueryHandler: 'GetScheduleOverridesByDatesQueryHandler',

  // Schedule Override Layer - Validation Services
  CreateScheduleOverrideValidationService: 'CreateScheduleOverrideValidationService',
  UpdateScheduleOverrideValidationService: 'UpdateScheduleOverrideValidationService',
  ScheduleOverrideValidationService: 'ScheduleOverrideValidationService',
} as const;

// Type-safe token keys
export type TokenKey = keyof typeof TOKENS;
